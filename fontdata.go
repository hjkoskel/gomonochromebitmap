// Some fonts for gomonochromebitmap
package gomonochromebitmap

import (
	"image"
	"strings"
)

type MonoFont map[rune]MonoBitmap //All bitmaps have same size

func (p *MonoFont) GetWH() (int, int) {
	for _, a := range *p {
		return a.W, a.H
	}
	return 0, 0
}

func (p *MonoFont) AreaEstimated(s string, maxWidth int, lineSpacing int, gap int) image.Rectangle {
	//TODO wrap if maxWidth is reached!
	rows := strings.Split(strings.TrimSpace(s), "\n")
	rowcount := len(rows)
	colcount := 0
	for _, row := range rows {
		colcount = max(colcount, len(row))
	}
	charW, charH := p.GetWH()
	return image.Rect(0, 0, colcount*charW+(colcount-1)*gap, rowcount*charH+(rowcount-1)*lineSpacing)
}

/*
TODO 3x3 font
https://en.wikipedia.org/wiki/3x3

TODO 4x4 font

TODO 3x4 font
http://atariage.com/forums/uploads/monthly_06_2012/post-3056-0-78298600-1340226009.gif


6x8 ja 6x6 fontit
http://merthsoft.com/linkguide/ti83+/tokens.html

3x4 font
https://github.com/Michaelangel007/nanofont3x4

https://github.com/basti79/LCD-fonts

TODO CONVERT TO GOLANG
https://github.com/olikraus/u8g2

http://www.rinkydinkelectronics.com/r_fonts.php

*/

func GetFont_4x5() MonoFont {
	tmp := map[rune][]byte{
		' ':  {0x00, 0x00, 0x00, 0x00, 0x00},
		'!':  {0xC0, 0xC0, 0xC0, 0x00, 0xC0},
		'"':  {0xA0, 0xA0, 0x00, 0x00, 0x00},
		'#':  {0xA0, 0xE0, 0xA0, 0xE0, 0xA0},
		'$':  {0x40, 0xE0, 0xC0, 0x60, 0xE0},
		'%':  {0xA0, 0x60, 0xC0, 0xA0, 0x00},
		'&':  {0x40, 0x40, 0xE0, 0xC0, 0x40},
		'\'': {0x20, 0x60, 0x00, 0x00, 0x00},
		'(':  {0x20, 0x40, 0x40, 0x40, 0x20},
		/* Unicode: U+0029 ()) , Width: 4 */
		')': {0x80, 0x40, 0x40, 0x40, 0x80},
		/* Unicode: U+002A (*) , Width: 4 */
		'*': {0xA0, 0x40, 0xE0, 0x40, 0xA0},
		/* Unicode: U+002B (+) , Width: 4 */
		'+': {0x00, 0x40, 0xE0, 0x40, 0x00},
		/* Unicode: U+002C (,) , Width: 4 */
		',': {0x00, 0x00, 0x00, 0x40, 0xC0},
		/* Unicode: U+002D (-) , Width: 4 */
		'-': {0x00, 0x00, 0xE0, 0x00, 0x00},
		/* Unicode: U+002E (.) , Width: 4 */
		'.': {0x00, 0x00, 0x00, 0xC0, 0xC0},
		/* Unicode: U+002F (/) , Width: 4 */
		'/': {0x20, 0x20, 0x40, 0x40, 0x80},
		/* Unicode: U+0030 (0) , Width: 4 */
		'0': {0x40, 0xA0, 0xA0, 0xA0, 0x40},
		/* Unicode: U+0031 (1) , Width: 4 */
		'1': {0x40, 0xC0, 0x40, 0x40, 0x40},
		/* Unicode: U+0032 (2) , Width: 4 */
		'2': {0xC0, 0x20, 0x40, 0x80, 0xE0},
		/* Unicode: U+0033 (3) , Width: 4 */
		'3': {0xC0, 0x20, 0x60, 0x20, 0xE0},
		/* Unicode: U+0034 (4) , Width: 4 */
		'4': {0xA0, 0xA0, 0xA0, 0xE0, 0x20},
		/* Unicode: U+0035 (5) , Width: 4 */
		'5': {0xE0, 0x80, 0xC0, 0x20, 0xC0},
		/* Unicode: U+0036 (6) , Width: 4 */
		'6': {0x60, 0x80, 0xE0, 0xA0, 0xE0},
		/* Unicode: U+0037 (7) , Width: 4 */
		'7': {0xE0, 0x20, 0x20, 0x40, 0x40},
		/* Unicode: U+0038 (8) , Width: 4 */
		'8': {0xE0, 0xA0, 0xE0, 0xA0, 0xE0},
		/* Unicode: U+0039 (9) , Width: 4 */
		'9': {0xE0, 0xA0, 0xE0, 0x20, 0xC0},
		/* Unicode: U+003A (:) , Width: 4 */
		':': {0xC0, 0xC0, 0x00, 0xC0, 0xC0},
		/* Unicode: U+003B (;) , Width: 4 */
		';': {0xC0, 0xC0, 0x00, 0x40, 0xC0},
		/* Unicode: U+003C (<) , Width: 4 */
		'<': {0x20, 0x40, 0x80, 0x40, 0x20},
		/* Unicode: U+003D (=) , Width: 4 */
		'=': {0x00, 0xE0, 0x00, 0xE0, 0x00},
		/* Unicode: U+003E (>) , Width: 4 */
		'>': {0x80, 0x40, 0x20, 0x40, 0x80},
		/* Unicode: U+003F (?) , Width: 4 */
		'?': {0xE0, 0x20, 0x60, 0x00, 0x40},
		/* Unicode: U+0040 (@) , Width: 4 */
		'@': {0x60, 0xA0, 0xC0, 0x80, 0x60},
		/* Unicode: U+0041 (A) , Width: 4 */
		'A': {0xE0, 0xA0, 0xE0, 0xA0, 0xA0},
		'Ä': {0xAF, 0x0, 0xE0, 0xA0, 0xA0},
		'ä': {0xAF, 0x0, 0xE0, 0xA0, 0xA0},
		/* Unicode: U+0042 (B) , Width: 4 */
		'B': {0xE0, 0xA0, 0xC0, 0xA0, 0xE0},
		/* Unicode: U+0043 (C) , Width: 4 */
		'C': {0xE0, 0x80, 0x80, 0x80, 0xE0},
		/* Unicode: U+0044 (D) , Width: 4 */
		'D': {0xC0, 0xA0, 0xA0, 0xA0, 0xC0},
		/* Unicode: U+0045 (E) , Width: 4 */
		'E': {0xE0, 0x80, 0xE0, 0x80, 0xE0},
		/* Unicode: U+0046 (F) , Width: 4 */
		'F': {0xE0, 0x80, 0xE0, 0x80, 0x80},
		/* Unicode: U+0047 (G) , Width: 4 */
		'G': {0xE0, 0x80, 0xA0, 0xA0, 0xE0},
		/* Unicode: U+0048 (H) , Width: 4 */
		'H': {0xA0, 0xA0, 0xE0, 0xA0, 0xA0},
		/* Unicode: U+0049 (I) , Width: 4 */
		'I': {0xE0, 0x40, 0x40, 0x40, 0xE0},
		/* Unicode: U+004A (J) , Width: 4 */
		'J': {0x20, 0x20, 0x20, 0xA0, 0xE0},
		/* Unicode: U+004B (K) , Width: 4 */
		'K': {0xA0, 0xA0, 0xC0, 0xA0, 0xA0},
		/* Unicode: U+004C (L) , Width: 4 */
		'L': {0x80, 0x80, 0x80, 0x80, 0xE0},
		/* Unicode: U+004D (M) , Width: 4 */
		'M': {0xA0, 0xE0, 0xA0, 0xA0, 0xA0},
		/* Unicode: U+004E (N) , Width: 4 */
		'N': {0xE0, 0xA0, 0xA0, 0xA0, 0xA0},
		/* Unicode: U+004F (O) , Width: 4 */
		'O': {0xE0, 0xA0, 0xA0, 0xA0, 0xE0},
		'Ö': {0xAF, 0x0, 0xF0, 0xF0, 0xF0},
		'ö': {0xAF, 0x0, 0xF0, 0xF0, 0xF0},
		/* Unicode: U+0050 (P) , Width: 4 */
		'P': {0xE0, 0xA0, 0xE0, 0x80, 0x80},
		/* Unicode: U+0051 (Q) , Width: 4 */
		'Q': {0xE0, 0xA0, 0xA0, 0xC0, 0x60},
		/* Unicode: U+0052 (R) , Width: 4 */
		'R': {0xE0, 0xA0, 0xC0, 0xA0, 0xA0},
		/* Unicode: U+0053 (S) , Width: 4 */
		'S': {0xE0, 0x80, 0xE0, 0x20, 0xE0},
		/* Unicode: U+0054 (T) , Width: 4 */
		'T': {0xE0, 0x40, 0x40, 0x40, 0x40},
		/* Unicode: U+0055 (U) , Width: 4 */
		'U': {0xA0, 0xA0, 0xA0, 0xA0, 0xE0},
		/* Unicode: U+0056 (V) , Width: 4 */
		'V': {0xA0, 0xA0, 0xA0, 0xA0, 0x40},
		/* Unicode: U+0057 (W) , Width: 4 */
		'W': {0xA0, 0xA0, 0xA0, 0xE0, 0xA0},
		/* Unicode: U+0058 (X) , Width: 4 */
		'X': {0xA0, 0xE0, 0x40, 0xE0, 0xA0},
		/* Unicode: U+0059 (Y) , Width: 4 */
		'Y': {0xA0, 0xA0, 0xE0, 0x40, 0x40},
		/* Unicode: U+005A (Z) , Width: 4 */
		'Z': {0xE0, 0x20, 0x40, 0x80, 0xE0},
		/* Unicode: U+005B ([) , Width: 4 */
		'[': {0x60, 0x40, 0x40, 0x40, 0x60},
		/* Unicode: U+005C (\) , Width: 4 */
		'\\': {0x80, 0x80, 0x40, 0x40, 0x20},
		/* Unicode: U+005D (]) , Width: 4 */
		']': {0xC0, 0x40, 0x40, 0x40, 0xC0},
		/* Unicode: U+005E (^) , Width: 4 */
		'^': {0x40, 0xA0, 0x00, 0x00, 0x00},
		/* Unicode: U+005F (_) , Width: 4 */
		'_': {0x00, 0x00, 0x00, 0x00, 0xE0},
		/* Unicode: U+0060 (`) , Width: 4 */
		'`': {0x40, 0x60, 0x00, 0x00, 0x00},
		/* Unicode: U+0061 (a) , Width: 4 */
		'a': {0x00, 0xE0, 0x60, 0xA0, 0xE0},
		/* Unicode: U+0062 (b) , Width: 4 */
		'b': {0x80, 0xE0, 0xA0, 0xA0, 0xE0},
		/* Unicode: U+0063 (c) , Width: 4 */
		'c': {0x00, 0xE0, 0x80, 0x80, 0xE0},
		/* Unicode: U+0064 (d) , Width: 4 */
		'd': {0x20, 0xE0, 0xA0, 0xA0, 0xE0},
		/* Unicode: U+0065 (e) , Width: 4 */
		'e': {0x00, 0xE0, 0xA0, 0xC0, 0xE0},
		/* Unicode: U+0066 (f) , Width: 4 */
		'f': {0x60, 0x80, 0xC0, 0x80, 0x80},
		/* Unicode: U+0067 (g) , Width: 4 */
		'g': {0x00, 0xE0, 0xA0, 0x60, 0xE0},
		/* Unicode: U+0068 (h) , Width: 4 */
		'h': {0x80, 0xE0, 0xA0, 0xA0, 0xA0},
		/* Unicode: U+0069 (i) , Width: 4 */
		'i': {0x00, 0x40, 0x40, 0x40, 0x40},
		/* Unicode: U+006A (j) , Width: 4 */
		'j': {0x00, 0x20, 0x20, 0xA0, 0xE0},
		/* Unicode: U+006B (k) , Width: 4 */
		'k': {0x80, 0xA0, 0xC0, 0xC0, 0xA0},
		/* Unicode: U+006C (l) , Width: 4 */
		'l': {0xC0, 0x40, 0x40, 0x40, 0x40},
		/* Unicode: U+006D (m) , Width: 4 */
		'm': {0x00, 0xA0, 0xE0, 0xA0, 0xA0},
		/* Unicode: U+006E (n) , Width: 4 */
		'n': {0x00, 0xE0, 0xA0, 0xA0, 0xA0},
		/* Unicode: U+006F (o) , Width: 4 */
		'o': {0x00, 0xE0, 0xA0, 0xA0, 0xE0},
		/* Unicode: U+0070 (p) , Width: 4 */
		'p': {0x00, 0xE0, 0xA0, 0xE0, 0x80},
		/* Unicode: U+0071 (q) , Width: 4 */
		'q': {0x00, 0xE0, 0xA0, 0xE0, 0x20},
		/* Unicode: U+0072 (r) , Width: 4 */
		'r': {0x00, 0xE0, 0xA0, 0x80, 0x80},
		/* Unicode: U+0073 (s) , Width: 4 */
		's': {0x00, 0xE0, 0xC0, 0x60, 0xE0},
		/* Unicode: U+0074 (t) , Width: 4 */
		't': {0x40, 0xE0, 0x40, 0x40, 0x60},
		/* Unicode: U+0075 (u) , Width: 4 */
		'u': {0x00, 0xA0, 0xA0, 0xA0, 0xE0},
		/* Unicode: U+0076 (v) , Width: 4 */
		'v': {0x00, 0xA0, 0xA0, 0xA0, 0x40},
		/* Unicode: U+0077 (w) , Width: 4 */
		'w': {0x00, 0xA0, 0xA0, 0xE0, 0xA0},
		/* Unicode: U+0078 (x) , Width: 4 */
		'x': {0x00, 0xA0, 0x40, 0x40, 0xA0},
		/* Unicode: U+0079 (y) , Width: 4 */
		'y': {0x00, 0xA0, 0xA0, 0x60, 0xC0},
		/* Unicode: U+007A (z) , Width: 4 */
		'z': {0x00, 0xE0, 0x60, 0xC0, 0xE0},
		/* Unicode: U+007B ({) , Width: 4 */
		'{': {0x60, 0x40, 0xC0, 0x40, 0x60},
		/* Unicode: U+007C (|) , Width: 4 */
		'|': {0x40, 0x40, 0x40, 0x40, 0x40},
		/* Unicode: U+007D (}) , Width: 4 */
		'}': {0xC0, 0x40, 0x60, 0x40, 0xC0},
		/* Unicode: U+007E (~) , Width: 4 */
		'~': {0x00, 0xC0, 0x60, 0x00, 0x00},

		'€': {0x60, 0x80, 0x80 + 0x40, 0x80, 0x60},
	}

	result := make(map[rune]MonoBitmap)
	for s, dat := range tmp {
		bm := NewMonoBitmap(4, 5, false)
		//Rullataan lapi
		for x := 0; x < 4; x++ {
			for y := 0; y < 5; y++ {
				mask := byte(1 << byte(8-x))
				bm.SetPix(x, y, (dat[y]&mask) > 0)
				result[s] = bm
			}
		}
	}
	return result
}

func GetFont_8x12() MonoFont {

	//Yksi tavu per rivi

	tmp := map[rune][]byte{
		' ':  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // <space>
		'!':  {0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x20, 0x00, 0x00}, // !
		'"':  {0x00, 0x28, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // "
		'#':  {0x00, 0x00, 0x28, 0x28, 0xFC, 0x28, 0x50, 0xFC, 0x50, 0x50, 0x00, 0x00}, // #
		'$':  {0x00, 0x20, 0x78, 0xA8, 0xA0, 0x60, 0x30, 0x28, 0xA8, 0xF0, 0x20, 0x00}, // $
		'%':  {0x00, 0x00, 0x48, 0xA8, 0xB0, 0x50, 0x28, 0x34, 0x54, 0x48, 0x00, 0x00}, // %
		'&':  {0x00, 0x00, 0x20, 0x50, 0x50, 0x78, 0xA8, 0xA8, 0x90, 0x6C, 0x00, 0x00}, // &
		'\'': {0x00, 0x40, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // '
		'(':  {0x00, 0x04, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x04, 0x00}, // (
		')':  {0x00, 0x40, 0x20, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x20, 0x40, 0x00}, // )
		'*':  {0x00, 0x00, 0x00, 0x20, 0xA8, 0x70, 0x70, 0xA8, 0x20, 0x00, 0x00, 0x00}, // *
		'+':  {0x00, 0x00, 0x20, 0x20, 0x20, 0xF8, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00}, // +
		',':  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x80}, // ,
		'-':  {0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // -
		'.':  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00}, // .
		'/':  {0x00, 0x08, 0x10, 0x10, 0x10, 0x20, 0x20, 0x40, 0x40, 0x40, 0x80, 0x00}, // /

		'0':  {0x00, 0x00, 0x70, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00}, // 0
		'1':  {0x00, 0x00, 0x20, 0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x00, 0x00}, // 1
		'2':  {0x00, 0x00, 0x70, 0x88, 0x88, 0x10, 0x20, 0x40, 0x80, 0xF8, 0x00, 0x00}, // 2
		'3':  {0x00, 0x00, 0x70, 0x88, 0x08, 0x30, 0x08, 0x08, 0x88, 0x70, 0x00, 0x00}, // 3
		'4':  {0x00, 0x00, 0x10, 0x30, 0x50, 0x50, 0x90, 0x78, 0x10, 0x18, 0x00, 0x00}, // 4
		'5':  {0x00, 0x00, 0xF8, 0x80, 0x80, 0xF0, 0x08, 0x08, 0x88, 0x70, 0x00, 0x00}, // 5
		'6':  {0x00, 0x00, 0x70, 0x90, 0x80, 0xF0, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00}, // 6
		'7':  {0x00, 0x00, 0xF8, 0x90, 0x10, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00}, // 7
		'8':  {0x00, 0x00, 0x70, 0x88, 0x88, 0x70, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00}, // 8
		'9':  {0x00, 0x00, 0x70, 0x88, 0x88, 0x88, 0x78, 0x08, 0x48, 0x70, 0x00, 0x00}, // 9
		':':  {0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00}, // :
		';':  {0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00}, // ;
		+'<': {0x00, 0x04, 0x08, 0x10, 0x20, 0x40, 0x20, 0x10, 0x08, 0x04, 0x00, 0x00}, // <
		'=':  {0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00}, // =
		'>':  {0x00, 0x40, 0x20, 0x10, 0x08, 0x04, 0x08, 0x10, 0x20, 0x40, 0x00, 0x00}, // >
		'?':  {0x00, 0x00, 0x70, 0x88, 0x88, 0x10, 0x20, 0x20, 0x00, 0x20, 0x00, 0x00}, // ?

		'@': {0x00, 0x00, 0x70, 0x88, 0x98, 0xA8, 0xA8, 0xB8, 0x80, 0x78, 0x00, 0x00}, // @
		'A': {0x00, 0x00, 0x20, 0x20, 0x30, 0x50, 0x50, 0x78, 0x48, 0xCC, 0x00, 0x00}, // A
		'Ä': {0x88, 0x00, 0x20, 0x20, 0x30, 0x50, 0x50, 0x78, 0x48, 0xCC, 0x00, 0x00},
		'B': {0x00, 0x00, 0xF0, 0x48, 0x48, 0x70, 0x48, 0x48, 0x48, 0xF0, 0x00, 0x00}, // B
		'C': {0x00, 0x00, 0x78, 0x88, 0x80, 0x80, 0x80, 0x80, 0x88, 0x70, 0x00, 0x00}, // C
		'D': {0x00, 0x00, 0xF0, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0xF0, 0x00, 0x00}, // D
		'E': {0x00, 0x00, 0xF8, 0x48, 0x50, 0x70, 0x50, 0x40, 0x48, 0xF8, 0x00, 0x00}, // E
		'F': {0x00, 0x00, 0xF8, 0x48, 0x50, 0x70, 0x50, 0x40, 0x40, 0xE0, 0x00, 0x00}, // F
		'G': {0x00, 0x00, 0x38, 0x48, 0x80, 0x80, 0x9C, 0x88, 0x48, 0x30, 0x00, 0x00}, // G
		'H': {0x00, 0x00, 0xCC, 0x48, 0x48, 0x78, 0x48, 0x48, 0x48, 0xCC, 0x00, 0x00}, // H
		'I': {0x00, 0x00, 0xF8, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xF8, 0x00, 0x00}, // I
		'J': {0x00, 0x00, 0x7C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x90, 0xE0, 0x00}, // J
		'K': {0x00, 0x00, 0xEC, 0x48, 0x50, 0x60, 0x50, 0x50, 0x48, 0xEC, 0x00, 0x00}, // K
		'L': {0x00, 0x00, 0xE0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x44, 0xFC, 0x00, 0x00}, // L
		'M': {0x00, 0x00, 0xD8, 0xD8, 0xD8, 0xD8, 0xA8, 0xA8, 0xA8, 0xA8, 0x00, 0x00}, // M
		'N': {0x00, 0x00, 0xDC, 0x48, 0x68, 0x68, 0x58, 0x58, 0x48, 0xE8, 0x00, 0x00}, // N
		'O': {0x00, 0x00, 0x70, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00}, // O
		'Ö': {0x88, 0x00, 0x70, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00},

		'P':  {0x00, 0x00, 0xF0, 0x48, 0x48, 0x70, 0x40, 0x40, 0x40, 0xE0, 0x00, 0x00}, // P
		'Q':  {0x00, 0x00, 0x70, 0x88, 0x88, 0x88, 0x88, 0xE8, 0x98, 0x70, 0x18, 0x00}, // Q
		'R':  {0x00, 0x00, 0xF0, 0x48, 0x48, 0x70, 0x50, 0x48, 0x48, 0xEC, 0x00, 0x00}, // R
		'S':  {0x00, 0x00, 0x78, 0x88, 0x80, 0x60, 0x10, 0x08, 0x88, 0xF0, 0x00, 0x00}, // S
		'T':  {0x00, 0x00, 0xF8, 0xA8, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x00, 0x00}, // T
		'U':  {0x00, 0x00, 0xCC, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x30, 0x00, 0x00}, // U
		'V':  {0x00, 0x00, 0xCC, 0x48, 0x48, 0x50, 0x50, 0x30, 0x20, 0x20, 0x00, 0x00}, // V
		'W':  {0x00, 0x00, 0xA8, 0xA8, 0xA8, 0x70, 0x50, 0x50, 0x50, 0x50, 0x00, 0x00}, // W
		'X':  {0x00, 0x00, 0xD8, 0x50, 0x50, 0x20, 0x20, 0x50, 0x50, 0xD8, 0x00, 0x00}, // X
		'Y':  {0x00, 0x00, 0xD8, 0x50, 0x50, 0x20, 0x20, 0x20, 0x20, 0x70, 0x00, 0x00}, // Y
		'Z':  {0x00, 0x00, 0xF8, 0x90, 0x10, 0x20, 0x20, 0x40, 0x48, 0xF8, 0x00, 0x00}, // Z
		'[':  {0x00, 0x38, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x38, 0x00}, // [
		'\\': {0x00, 0x40, 0x40, 0x40, 0x20, 0x20, 0x10, 0x10, 0x10, 0x08, 0x00, 0x00}, // <backslash>
		']':  {0x00, 0x70, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x70, 0x00}, // ]
		'^':  {0x00, 0x20, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // ^
		'_':  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC}, // _

		'`': {0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // `
		'a': {0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x48, 0x38, 0x48, 0x3C, 0x00, 0x00}, // a
		'ä': {0x00, 0x00, 0x00, 0x84, 0x00, 0x30, 0x48, 0x38, 0x48, 0x3C, 0x00, 0x00}, // a
		'b': {0x00, 0x00, 0xC0, 0x40, 0x40, 0x70, 0x48, 0x48, 0x48, 0x70, 0x00, 0x00}, // b
		'c': {0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x48, 0x40, 0x40, 0x38, 0x00, 0x00}, // c
		'd': {0x00, 0x00, 0x18, 0x08, 0x08, 0x38, 0x48, 0x48, 0x48, 0x3C, 0x00, 0x00}, // d
		'e': {0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x48, 0x78, 0x40, 0x38, 0x00, 0x00}, // e
		'f': {0x00, 0x00, 0x1C, 0x20, 0x20, 0x78, 0x20, 0x20, 0x20, 0x78, 0x00, 0x00}, // f
		'g': {0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x48, 0x30, 0x40, 0x78, 0x44, 0x38}, // g
		'h': {0x00, 0x00, 0xC0, 0x40, 0x40, 0x70, 0x48, 0x48, 0x48, 0xEC, 0x00, 0x00}, // h
		'i': {0x00, 0x00, 0x20, 0x00, 0x00, 0x60, 0x20, 0x20, 0x20, 0x70, 0x00, 0x00}, // i
		'j': {0x00, 0x00, 0x10, 0x00, 0x00, 0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0xE0}, // j
		'k': {0x00, 0x00, 0xC0, 0x40, 0x40, 0x5C, 0x50, 0x70, 0x48, 0xEC, 0x00, 0x00}, // k
		'l': {0x00, 0x00, 0xE0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xF8, 0x00, 0x00}, // l
		'm': {0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xA8, 0xA8, 0xA8, 0xA8, 0x00, 0x00}, // m
		'n': {0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x48, 0x48, 0x48, 0xEC, 0x00, 0x00}, // n
		'o': {0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x48, 0x48, 0x48, 0x30, 0x00, 0x00}, // o
		'ö': {0x00, 0x00, 0x00, 0x84, 0x00, 0x30, 0x48, 0x48, 0x48, 0x30, 0x00, 0x00},

		'p': {0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x48, 0x48, 0x48, 0x70, 0x40, 0xE0}, // p
		'q': {0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x48, 0x48, 0x48, 0x38, 0x08, 0x1C}, // q
		'r': {0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0x60, 0x40, 0x40, 0xE0, 0x00, 0x00}, // r
		's': {0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x40, 0x30, 0x08, 0x78, 0x00, 0x00}, // s
		't': {0x00, 0x00, 0x00, 0x20, 0x20, 0x70, 0x20, 0x20, 0x20, 0x18, 0x00, 0x00}, // t
		'u': {0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0x48, 0x48, 0x48, 0x3C, 0x00, 0x00}, // u
		'v': {0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0x48, 0x50, 0x30, 0x20, 0x00, 0x00}, // v
		'w': {0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0xA8, 0x70, 0x50, 0x50, 0x00, 0x00}, // w
		'x': {0x00, 0x00, 0x00, 0x00, 0x00, 0xD8, 0x50, 0x20, 0x50, 0xD8, 0x00, 0x00}, // x
		'y': {0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0x48, 0x50, 0x30, 0x20, 0x20, 0xC0}, // y
		'z': {0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x10, 0x20, 0x20, 0x78, 0x00, 0x00}, // z
		'{': {0x00, 0x18, 0x10, 0x10, 0x10, 0x20, 0x10, 0x10, 0x10, 0x10, 0x18, 0x00}, // {
		'|': {0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10}, // |
		'}': {0x00, 0x60, 0x20, 0x20, 0x20, 0x10, 0x20, 0x20, 0x20, 0x20, 0x60, 0x00}, // }
		'~': {0x40, 0xA4, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // ~
		'€': {0x00, 0x00, 0x78, 0x88, 0xE0, 0x80, 0xE0, 0x80, 0x88, 0x70, 0x00, 0x00},
	}

	result := make(map[rune]MonoBitmap)
	for s, dat := range tmp {
		bm := NewMonoBitmap(8, 12, false)
		//Rullataan lapi
		for x := 0; x < 8; x++ {
			for y := 0; y < 12; y++ {
				mask := byte(1 << byte(8-x))
				bm.SetPix(x, y, (dat[y]&mask) > 0)
				result[s] = bm
			}
		}
	}
	return result
}

func GetFont_6x10() MonoFont {
	/* Unicode: U+0020 ( ) , Width: 6 */

	//Yksi tavu per rivi

	tmp := map[rune][]byte{
		' ': {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		/* Unicode: U+0021 (!) , Width: 6 */
		'!': {0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x20, 0x00, 0x00},
		/* Unicode: U+0022 (") , Width: 6 */
		'"': {0x00, 0x50, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		/* Unicode: U+0023 (#) , Width: 6 */
		'#': {0x00, 0x50, 0x50, 0xF8, 0x50, 0xF8, 0x50, 0x50, 0x00, 0x00},
		/* Unicode: U+0024 ($) , Width: 6 */
		'$': {0x00, 0x20, 0x70, 0xA0, 0x70, 0x28, 0x70, 0x20, 0x00, 0x00},
		/* Unicode: U+0025 (%) , Width: 6 */
		'%': {0x00, 0x48, 0xA8, 0x50, 0x20, 0x50, 0xA8, 0x90, 0x00, 0x00},
		/* Unicode: U+0026 (&) , Width: 6 */
		'&': {0x00, 0x40, 0xA0, 0xA0, 0x40, 0xA8, 0x90, 0x68, 0x00, 0x00},
		/* Unicode: U+0027 (') , Width: 6 */
		'\'': {0x00, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		/* Unicode: U+0028 (() , Width: 6 */
		'(': {0x00, 0x10, 0x20, 0x40, 0x40, 0x40, 0x20, 0x10, 0x00, 0x00},
		/* Unicode: U+0029 ()) , Width: 6 */
		')': {0x00, 0x40, 0x20, 0x10, 0x10, 0x10, 0x20, 0x40, 0x00, 0x00},
		/* Unicode: U+002A (*) , Width: 6 */
		'*': {0x00, 0x00, 0x88, 0x50, 0xF8, 0x50, 0x88, 0x00, 0x00, 0x00},
		/* Unicode: U+002B (+) , Width: 6 */
		'+': {0x00, 0x00, 0x20, 0x20, 0xF8, 0x20, 0x20, 0x00, 0x00, 0x00},
		/* Unicode: U+002C (,) , Width: 6 */
		',': {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x20, 0x40, 0x00},
		/* Unicode: U+002D (-) , Width: 6 */
		'-': {0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00},
		/* Unicode: U+002E (.) , Width: 6 */
		'.': {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x70, 0x20, 0x00},
		/* Unicode: U+002F (/) , Width: 6 */
		'/': {0x00, 0x08, 0x08, 0x10, 0x20, 0x40, 0x80, 0x80, 0x00, 0x00},
		/* Unicode: U+0030 (0) , Width: 6 */
		'0': {0x00, 0x20, 0x50, 0x88, 0x88, 0x88, 0x50, 0x20, 0x00, 0x00},
		/* Unicode: U+0031 (1) , Width: 6 */
		'1': {0x00, 0x20, 0x60, 0xA0, 0x20, 0x20, 0x20, 0xF8, 0x00, 0x00},
		/* Unicode: U+0032 (2) , Width: 6 */
		'2': {0x00, 0x70, 0x88, 0x08, 0x30, 0x40, 0x80, 0xF8, 0x00, 0x00},
		/* Unicode: U+0033 (3) , Width: 6 */
		'3': {0x00, 0xF8, 0x08, 0x10, 0x30, 0x08, 0x88, 0x70, 0x00, 0x00},
		/* Unicode: U+0034 (4) , Width: 6 */
		'4': {0x00, 0x10, 0x30, 0x50, 0x90, 0xF8, 0x10, 0x10, 0x00, 0x00},
		/* Unicode: U+0035 (5) , Width: 6 */
		'5': {0x00, 0xF8, 0x80, 0xB0, 0xC8, 0x08, 0x88, 0x70, 0x00, 0x00},
		/* Unicode: U+0036 (6) , Width: 6 */
		'6': {0x00, 0x30, 0x40, 0x80, 0xB0, 0xC8, 0x88, 0x70, 0x00, 0x00},
		/* Unicode: U+0037 (7) , Width: 6 */
		'7': {0x00, 0xF8, 0x08, 0x10, 0x10, 0x20, 0x40, 0x40, 0x00, 0x00},
		/* Unicode: U+0038 (8) , Width: 6 */
		'8': {0x00, 0x70, 0x88, 0x88, 0x70, 0x88, 0x88, 0x70, 0x00, 0x00},
		/* Unicode: U+0039 (9) , Width: 6 */
		'9': {0x00, 0x70, 0x88, 0x98, 0x68, 0x08, 0x10, 0x60, 0x00, 0x00},
		/* Unicode: U+003A (:) , Width: 6 */
		':': {0x00, 0x00, 0x20, 0x70, 0x20, 0x00, 0x20, 0x70, 0x20, 0x00},
		/* Unicode: U+003B (;) , Width: 6 */
		';': {0x00, 0x00, 0x20, 0x70, 0x20, 0x00, 0x30, 0x20, 0x40, 0x00},
		/* Unicode: U+003C (<) , Width: 6 */
		'<': {0x00, 0x08, 0x10, 0x20, 0x40, 0x20, 0x10, 0x08, 0x00, 0x00},
		/* Unicode: U+003D (=) , Width: 6 */
		'=': {0x00, 0x00, 0x00, 0xF8, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00},
		/* Unicode: U+003E (>) , Width: 6 */
		'>': {0x00, 0x40, 0x20, 0x10, 0x08, 0x10, 0x20, 0x40, 0x00, 0x00},
		/* Unicode: U+003F (?) , Width: 6 */
		'?': {0x00, 0x70, 0x88, 0x10, 0x20, 0x20, 0x00, 0x20, 0x00, 0x00},
		/* Unicode: U+0040 (@) , Width: 6 */
		'@': {0x00, 0x70, 0x88, 0x98, 0xA8, 0xB0, 0x80, 0x70, 0x00, 0x00},
		/* Unicode: U+0041 (A) , Width: 6 */
		'A': {0x00, 0x20, 0x50, 0x88, 0x88, 0xF8, 0x88, 0x88, 0x00, 0x00},
		'Ä': {0x8F, 0x20, 0x50, 0x88, 0x88, 0xF8, 0x88, 0x88, 0x00, 0x00},
		/* Unicode: U+0042 (B) , Width: 6 */
		'B': {0x00, 0xF0, 0x48, 0x48, 0x70, 0x48, 0x48, 0xF0, 0x00, 0x00},
		/* Unicode: U+0043 (C) , Width: 6 */
		'C': {0x00, 0x70, 0x88, 0x80, 0x80, 0x80, 0x88, 0x70, 0x00, 0x00},
		/* Unicode: U+0044 (D) , Width: 6 */
		'D': {0x00, 0xF0, 0x48, 0x48, 0x48, 0x48, 0x48, 0xF0, 0x00, 0x00},
		/* Unicode: U+0045 (E) , Width: 6 */
		'E': {0x00, 0xF8, 0x80, 0x80, 0xF0, 0x80, 0x80, 0xF8, 0x00, 0x00},
		/* Unicode: U+0046 (F) , Width: 6 */
		'F': {0x00, 0xF8, 0x80, 0x80, 0xF0, 0x80, 0x80, 0x80, 0x00, 0x00},
		/* Unicode: U+0047 (G) , Width: 6 */
		'G': {0x00, 0x70, 0x88, 0x80, 0x80, 0x98, 0x88, 0x70, 0x00, 0x00},
		/* Unicode: U+0048 (H) , Width: 6 */
		'H': {0x00, 0x88, 0x88, 0x88, 0xF8, 0x88, 0x88, 0x88, 0x00, 0x00},
		/* Unicode: U+0049 (I) , Width: 6 */
		'I': {0x00, 0x70, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x00, 0x00},
		/* Unicode: U+004A (J) , Width: 6 */
		'J': {0x00, 0x38, 0x10, 0x10, 0x10, 0x10, 0x90, 0x60, 0x00, 0x00},
		/* Unicode: U+004B (K) , Width: 6 */
		'K': {0x00, 0x88, 0x90, 0xA0, 0xC0, 0xA0, 0x90, 0x88, 0x00, 0x00},
		/* Unicode: U+004C (L) , Width: 6 */
		'L': {0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xF8, 0x00, 0x00},
		/* Unicode: U+004D (M) , Width: 6 */
		'M': {0x00, 0x88, 0x88, 0xD8, 0xA8, 0x88, 0x88, 0x88, 0x00, 0x00},
		/* Unicode: U+004E (N) , Width: 6 */
		'N': {0x00, 0x88, 0x88, 0xC8, 0xA8, 0x98, 0x88, 0x88, 0x00, 0x00},
		/* Unicode: U+004F (O) , Width: 6 */
		'O': {0x00, 0x70, 0x88, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00},
		'Ö': {0x8F, 0x70, 0x88, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00},
		/* Unicode: U+0050 (P) , Width: 6 */
		'P': {0x00, 0xF0, 0x88, 0x88, 0xF0, 0x80, 0x80, 0x80, 0x00, 0x00},
		/* Unicode: U+0051 (Q) , Width: 6 */
		'Q': {0x00, 0x70, 0x88, 0x88, 0x88, 0x88, 0xA8, 0x70, 0x08, 0x00},
		/* Unicode: U+0052 (R) , Width: 6 */
		'R': {0x00, 0xF0, 0x88, 0x88, 0xF0, 0xA0, 0x90, 0x88, 0x00, 0x00},
		/* Unicode: U+0053 (S) , Width: 6 */
		'S': {0x00, 0x70, 0x88, 0x80, 0x70, 0x08, 0x88, 0x70, 0x00, 0x00},
		/* Unicode: U+0054 (T) , Width: 6 */
		'T': {0x00, 0xF8, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00},
		/* Unicode: U+0055 (U) , Width: 6 */
		'U': {0x00, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00},
		/* Unicode: U+0056 (V) , Width: 6 */
		'V': {0x00, 0x88, 0x88, 0x88, 0x50, 0x50, 0x50, 0x20, 0x00, 0x00},
		/* Unicode: U+0057 (W) , Width: 6 */
		'W': {0x00, 0x88, 0x88, 0x88, 0xA8, 0xA8, 0xD8, 0x88, 0x00, 0x00},
		/* Unicode: U+0058 (X) , Width: 6 */
		'X': {0x00, 0x88, 0x88, 0x50, 0x20, 0x50, 0x88, 0x88, 0x00, 0x00},
		/* Unicode: U+0059 (Y) , Width: 6 */
		'Y': {0x00, 0x88, 0x88, 0x50, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00},
		/* Unicode: U+005A (Z) , Width: 6 */
		'Z': {0x00, 0xF8, 0x08, 0x10, 0x20, 0x40, 0x80, 0xF8, 0x00, 0x00},
		/* Unicode: U+005B ([) , Width: 6 */
		'[': {0x00, 0x70, 0x40, 0x40, 0x40, 0x40, 0x40, 0x70, 0x00, 0x00},
		/* Unicode: U+005C (\) , Width: 6 */
		'\\': {0x00, 0x80, 0x80, 0x40, 0x20, 0x10, 0x08, 0x08, 0x00, 0x00},
		/* Unicode: U+005D (]) , Width: 6 */
		']': {0x00, 0x70, 0x10, 0x10, 0x10, 0x10, 0x10, 0x70, 0x00, 0x00},
		/* Unicode: U+005E (^) , Width: 6 */
		'^': {0x00, 0x20, 0x50, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		/* Unicode: U+005F (_) , Width: 6 */
		'_': {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00},
		/* Unicode: U+0060 (`) , Width: 6 */
		'`': {0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		/* Unicode: U+0061 (a) , Width: 6 */
		'a': {0x00, 0x00, 0x00, 0x70, 0x08, 0x78, 0x88, 0x78, 0x00, 0x00},
		'ä': {0x00, 0x8F, 0x00, 0x70, 0x08, 0x78, 0x88, 0x78, 0x00, 0x00},
		/* Unicode: U+0062 (b) , Width: 6 */
		'b': {0x00, 0x80, 0x80, 0xB0, 0xC8, 0x88, 0xC8, 0xB0, 0x00, 0x00},
		/* Unicode: U+0063 (c) , Width: 6 */
		'c': {0x00, 0x00, 0x00, 0x70, 0x88, 0x80, 0x88, 0x70, 0x00, 0x00},
		/* Unicode: U+0064 (d) , Width: 6 */
		'd': {0x00, 0x08, 0x08, 0x68, 0x98, 0x88, 0x98, 0x68, 0x00, 0x00},
		/* Unicode: U+0065 (e) , Width: 6 */
		'e': {0x00, 0x00, 0x00, 0x70, 0x88, 0xF8, 0x80, 0x70, 0x00, 0x00},
		/* Unicode: U+0066 (f) , Width: 6 */
		'f': {0x00, 0x30, 0x48, 0x40, 0xF0, 0x40, 0x40, 0x40, 0x00, 0x00},
		/* Unicode: U+0067 (g) , Width: 6 */
		'g': {0x00, 0x00, 0x00, 0x78, 0x88, 0x88, 0x78, 0x08, 0x88, 0x70},
		/* Unicode: U+0068 (h) , Width: 6 */
		'h': {0x00, 0x80, 0x80, 0xB0, 0xC8, 0x88, 0x88, 0x88, 0x00, 0x00},
		/* Unicode: U+0069 (i) , Width: 6 */
		'i': {0x00, 0x20, 0x00, 0x60, 0x20, 0x20, 0x20, 0x70, 0x00, 0x00},
		/* Unicode: U+006A (j) , Width: 6 */
		'j': {0x00, 0x08, 0x00, 0x18, 0x08, 0x08, 0x08, 0x48, 0x48, 0x30},
		/* Unicode: U+006B (k) , Width: 6 */
		'k': {0x00, 0x80, 0x80, 0x88, 0x90, 0xE0, 0x90, 0x88, 0x00, 0x00},
		/* Unicode: U+006C (l) , Width: 6 */
		'l': {0x00, 0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x00, 0x00},
		/* Unicode: U+006D (m) , Width: 6 */
		'm': {0x00, 0x00, 0x00, 0xD0, 0xA8, 0xA8, 0xA8, 0x88, 0x00, 0x00},
		/* Unicode: U+006E (n) , Width: 6 */
		'n': {0x00, 0x00, 0x00, 0xB0, 0xC8, 0x88, 0x88, 0x88, 0x00, 0x00},
		/* Unicode: U+006F (o) , Width: 6 */
		'o': {0x00, 0x00, 0x00, 0x70, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00},
		'ö': {0x00, 0x8F, 0x00, 0x70, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00},
		/* Unicode: U+0070 (p) , Width: 6 */
		'p': {0x00, 0x00, 0x00, 0xB0, 0xC8, 0x88, 0xC8, 0xB0, 0x80, 0x80},
		/* Unicode: U+0071 (q) , Width: 6 */
		'q': {0x00, 0x00, 0x00, 0x68, 0x98, 0x88, 0x98, 0x68, 0x08, 0x08},
		/* Unicode: U+0072 (r) , Width: 6 */
		'r': {0x00, 0x00, 0x00, 0xB0, 0xC8, 0x80, 0x80, 0x80, 0x00, 0x00},
		/* Unicode: U+0073 (s) , Width: 6 */
		's': {0x00, 0x00, 0x00, 0x70, 0x80, 0x70, 0x08, 0xF0, 0x00, 0x00},
		/* Unicode: U+0074 (t) , Width: 6 */
		't': {0x00, 0x40, 0x40, 0xF0, 0x40, 0x40, 0x48, 0x30, 0x00, 0x00},
		/* Unicode: U+0075 (u) , Width: 6 */
		'u': {0x00, 0x00, 0x00, 0x88, 0x88, 0x88, 0x98, 0x68, 0x00, 0x00},
		/* Unicode: U+0076 (v) , Width: 6 */
		'v': {0x00, 0x00, 0x00, 0x88, 0x88, 0x50, 0x50, 0x20, 0x00, 0x00},
		/* Unicode: U+0077 (w) , Width: 6 */
		'w': {0x00, 0x00, 0x00, 0x88, 0x88, 0xA8, 0xA8, 0x50, 0x00, 0x00},
		/* Unicode: U+0078 (x) , Width: 6 */
		'x': {0x00, 0x00, 0x00, 0x88, 0x50, 0x20, 0x50, 0x88, 0x00, 0x00},
		/* Unicode: U+0079 (y) , Width: 6 */
		'y': {0x00, 0x00, 0x00, 0x88, 0x88, 0x98, 0x68, 0x08, 0x88, 0x70},
		/* Unicode: U+007A (z) , Width: 6 */
		'z': {0x00, 0x00, 0x00, 0xF8, 0x10, 0x20, 0x40, 0xF8, 0x00, 0x00},
		/* Unicode: U+007B ({) , Width: 6 */
		'{': {0x00, 0x18, 0x20, 0x10, 0x60, 0x10, 0x20, 0x18, 0x00, 0x00},
		/* Unicode: U+007C (|) , Width: 6 */
		'|': {0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00},
		/* Unicode: U+007D (}) , Width: 6 */
		'}': {0x00, 0x60, 0x10, 0x20, 0x18, 0x20, 0x10, 0x60, 0x00, 0x00},
		/* Unicode: U+007E (~) , Width: 6 */
		'~': {0x00, 0x48, 0xA8, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		'€': {0x00, 0x70, 0x88, 0xE0, 0x80, 0xE0, 0x88, 0x70, 0x00, 0x00},
	}

	result := make(map[rune]MonoBitmap)
	for s, dat := range tmp {
		bm := NewMonoBitmap(6, 10, false)
		//Rullataan lapi
		for x := 0; x < 6; x++ {
			for y := 0; y < 10; y++ {
				mask := byte(1 << byte(8-x))
				bm.SetPix(x, y, (dat[y]&mask) > 0)
				result[s] = bm
				/*mask:=byte(1<<byte(y))
				  bm.SetPix(x,y,(dat[x]&mask)>0)
				  result[s]=bm*/

			}
		}
	}
	return result
}

func GetFont_3x6() MonoFont {
	tmp := map[rune][]byte{
		' ':  {0x00, 0x00, 0x00}, // ' '  32
		'!':  {0x00, 0x17, 0x00}, // '!'  33
		'"':  {0x03, 0x00, 0x03}, // '"'  34
		'#':  {0x1F, 0x0A, 0x1F}, // '#'  35
		'$':  {0x16, 0x1F, 0x0D}, // '$'  36
		'%':  {0x19, 0x04, 0x13}, // '%'  37
		'&':  {0x1A, 0x15, 0x0A}, // '&'  38
		'\'': {0x00, 0x03, 0x00}, // '''  39
		'(':  {0x0E, 0x11, 0x00}, // '('  40
		')':  {0x00, 0x11, 0x0E}, // ')'  41
		'*':  {0x0A, 0x04, 0x0A}, // '*'  42
		'+':  {0x04, 0x0E, 0x04}, // '+'  43
		',':  {0x10, 0x08, 0x00}, // ','  44
		'-':  {0x04, 0x04, 0x04}, // '-'  45
		'.':  {0x00, 0x10, 0x00}, // '.'  46
		'/':  {0x18, 0x04, 0x03}, // '/'  47
		'0':  {0x1F, 0x11, 0x1F}, // '0'  48
		'1':  {0x12, 0x1F, 0x10}, // '1'  49
		'2':  {0x1D, 0x15, 0x17}, // '2'  50
		'3':  {0x11, 0x15, 0x1F}, // '3'  51
		'4':  {0x07, 0x04, 0x1F}, // '4'  52
		'5':  {0x17, 0x15, 0x1D}, // '5'  53
		'6':  {0x1F, 0x15, 0x1D}, // '6'  54
		'7':  {0x19, 0x05, 0x03}, // '7'  55
		'8':  {0x1F, 0x15, 0x1F}, // '8'  56
		'9':  {0x17, 0x15, 0x1F}, // '9'  57
		':':  {0x00, 0x0A, 0x00}, // ':'  58
		';':  {0x10, 0x0A, 0x00}, // ';'  59
		'<':  {0x04, 0x0A, 0x11}, // '<'  60
		'=':  {0x0A, 0x0A, 0x0A}, // '='  61
		'>':  {0x11, 0x0A, 0x04}, // '>'  62
		'?':  {0x01, 0x15, 0x03}, // '?'  63
		'@':  {0x0E, 0x11, 0x16}, // '@'  64
		'A':  {0x1F, 0x05, 0x1F}, // 'A'  65
		'Ä':  {0x1D, 0x0A, 0x1D},
		'B':  {0x1F, 0x15, 0x1B}, // 'B'  66
		'C':  {0x0E, 0x11, 0x11}, // 'C'  67
		'D':  {0x1F, 0x11, 0x0E}, // 'D'  68
		'E':  {0x1F, 0x15, 0x15}, // 'E'  69
		'F':  {0x1F, 0x05, 0x05}, // 'F'  70
		'G':  {0x0E, 0x11, 0x1D}, // 'G'  71
		'H':  {0x1F, 0x04, 0x1F}, // 'H'  72
		'I':  {0x11, 0x1F, 0x11}, // 'I'  73
		'J':  {0x08, 0x11, 0x0F}, // 'J'  74
		'K':  {0x1F, 0x04, 0x1B}, // 'K'  75
		'L':  {0x1F, 0x10, 0x10}, // 'L'  76
		'M':  {0x1F, 0x02, 0x1F}, // 'M'  77
		'N':  {0x1F, 0x01, 0x1E}, // 'N'  78
		'O':  {0x0E, 0x11, 0x0E}, // 'O'  79
		'Ö':  {0x0D, 0x12, 0x0D},
		'P':  {0x1F, 0x05, 0x06}, // 'P'  80
		'Q':  {0x0E, 0x19, 0x1F}, // 'Q'  81
		'R':  {0x1F, 0x05, 0x1B}, // 'R'  82
		'S':  {0x12, 0x15, 0x09}, // 'S'  83
		'T':  {0x01, 0x1F, 0x01}, // 'T'  84
		'U':  {0x0F, 0x10, 0x1F}, // 'U'  85
		'V':  {0x0F, 0x10, 0x0F}, // 'V'  86
		'W':  {0x1F, 0x0C, 0x1F}, // 'W'  87
		'X':  {0x1B, 0x04, 0x1B}, // 'X'  88
		'Y':  {0x03, 0x1C, 0x03}, // 'Y'  89
		'Z':  {0x19, 0x15, 0x13}, // 'Z'  90
		'[':  {0x00, 0x1F, 0x11}, // '['  91
		'\\': {0x03, 0x04, 0x18}, // '\'  92
		']':  {0x11, 0x1F, 0x00}, // ']'  93
		'^':  {0x02, 0x01, 0x02}, // '^'  94
		'_':  {0x10, 0x10, 0x10}, // '_'  95
		'`':  {0x01, 0x02, 0x00}, // '`'  96
		'a':  {0x0C, 0x12, 0x1E}, // 'a'  97
		'ä':  {0x0D, 0x12, 0x1F},
		'b':  {0x1F, 0x12, 0x0C}, // 'b'  98
		'c':  {0x0C, 0x12, 0x12}, // 'c'  99
		'd':  {0x0C, 0x12, 0x1F}, // 'd' 100
		'e':  {0x0C, 0x1A, 0x16}, // 'e' 101
		'f':  {0x1E, 0x09, 0x02}, // 'f' 102
		'g':  {0x24, 0x2A, 0x1E}, // 'g' 103
		'h':  {0x1F, 0x04, 0x18}, // 'h' 104
		'i':  {0x00, 0x1D, 0x00}, // 'i' 105
		'j':  {0x20, 0x20, 0x1D}, // 'j' 106
		'k':  {0x1F, 0x04, 0x1A}, // 'k' 107
		'l':  {0x00, 0x0F, 0x10}, // 'l' 108
		'm':  {0x1E, 0x04, 0x1E}, // 'm' 109
		'n':  {0x1E, 0x02, 0x1C}, // 'n' 110
		'o':  {0x0C, 0x12, 0x0C}, // 'o' 111
		'ö':  {0x0E, 0x12, 0x0E},
		'p':  {0x3E, 0x0A, 0x04}, // 'p' 112
		'q':  {0x04, 0x0A, 0x3E}, // 'q' 113
		'r':  {0x1E, 0x04, 0x02}, // 'r' 114
		's':  {0x14, 0x16, 0x1A}, // 's' 115
		't':  {0x02, 0x0F, 0x12}, // 't' 116
		'u':  {0x0E, 0x10, 0x1E}, // 'u' 117
		'v':  {0x0E, 0x10, 0x0E}, // 'v' 118
		'w':  {0x1E, 0x08, 0x1E}, // 'w' 119
		'x':  {0x1A, 0x04, 0x1A}, // 'x' 120
		'y':  {0x26, 0x28, 0x1E}, // 'y' 121
		'z':  {0x1A, 0x1E, 0x16}, // 'z' 122
		'{':  {0x04, 0x1F, 0x11}, // '{' 123
		'|':  {0x00, 0x1F, 0x00}, // '|' 124
		'}':  {0x11, 0x1F, 0x04}, // '}' 125
		'~':  {0x01, 0x03, 0x02}, // '~' 126
		'€':  {0x0E, 0x15, 0x11},
	}

	result := make(map[rune]MonoBitmap)
	for s, dat := range tmp {
		bm := NewMonoBitmap(3, 6, false)
		//Rullataan lapi
		for x := 0; x < 3; x++ {
			for y := 0; y < 6; y++ {
				mask := byte(1 << byte(y))
				bm.SetPix(x, y, (dat[x]&mask) > 0)
				result[s] = bm
			}
		}
	}
	return result
}

func GetFont_5x7() MonoFont {
	tmp := map[rune][]byte{
		' ':  {0x00, 0x00, 0x00, 0x00, 0x00}, //
		'!':  {0x00, 0x00, 0xfa, 0x00, 0x00}, // !
		'"':  {0x00, 0xe0, 0x00, 0xe0, 0x00}, // "
		'#':  {0x28, 0xfe, 0x28, 0xfe, 0x28}, // #
		'$':  {0x24, 0x54, 0xfe, 0x54, 0x48}, // $
		'%':  {0xc4, 0xc8, 0x10, 0x26, 0x46}, // %
		'&':  {0x6c, 0x92, 0xaa, 0x44, 0x0a}, // &
		'\'': {0x00, 0xa0, 0xc0, 0x00, 0x00}, // '
		'(':  {0x00, 0x38, 0x44, 0x82, 0x00}, // (
		')':  {0x00, 0x82, 0x44, 0x38, 0x00}, // )
		'*':  {0x10, 0x54, 0x38, 0x54, 0x10}, // *
		'+':  {0x08, 0x08, 0x3e, 0x08, 0x08}, // ,
		',':  {0x00, 0x0a, 0x0c, 0x00, 0x00}, // ,
		'-':  {0x10, 0x10, 0x10, 0x10, 0x10}, // -
		'.':  {0x00, 0x06, 0x06, 0x00, 0x00}, // .
		'/':  {0x04, 0x08, 0x10, 0x20, 0x40}, // /
		'0':  {0x7c, 0x8a, 0x92, 0xa2, 0x7c}, // 0
		'1':  {0x00, 0x42, 0xfe, 0x02, 0x00}, // 1
		'2':  {0x42, 0x86, 0x8a, 0x92, 0x62}, // 2
		'3':  {0x84, 0x82, 0xa2, 0xd2, 0x8c}, // 3
		'4':  {0x18, 0x28, 0x48, 0xfe, 0x08}, // 4
		'5':  {0xe4, 0xa2, 0xa2, 0xa2, 0x9c}, // 5
		'6':  {0x3c, 0x52, 0x92, 0x92, 0x0c}, // 6
		'7':  {0x80, 0x8e, 0x90, 0xa0, 0xc0}, // 7
		'8':  {0x6c, 0x92, 0x92, 0x92, 0x6c}, // 8
		'9':  {0x60, 0x92, 0x92, 0x94, 0x78}, // 9
		':':  {0x00, 0x6c, 0x6c, 0x00, 0x00}, // :
		';':  {0x00, 0x6a, 0x6c, 0x00, 0x00}, // ;
		'<':  {0x00, 0x10, 0x28, 0x44, 0x82}, // <
		'=':  {0x28, 0x28, 0x28, 0x28, 0x28}, // =
		'>':  {0x82, 0x44, 0x28, 0x10, 0x00}, // >
		'?':  {0x40, 0x80, 0x8a, 0x90, 0x60}, // ?
		'@':  {0x4c, 0x92, 0x9e, 0x82, 0x7c}, // @
		'A':  {0x7e, 0x88, 0x88, 0x88, 0x7e}, // A
		'Ä':  {0xBe, 0x48, 0x48, 0x48, 0xBe},
		'B':  {0xfe, 0x92, 0x92, 0x92, 0x6c}, // B
		'C':  {0x7c, 0x82, 0x82, 0x82, 0x44}, // C
		'D':  {0xfe, 0x82, 0x82, 0x44, 0x38}, // D
		'E':  {0xfe, 0x92, 0x92, 0x92, 0x82}, // E
		'F':  {0xfe, 0x90, 0x90, 0x80, 0x80}, // F
		'G':  {0x7c, 0x82, 0x82, 0x8a, 0x4c}, // G
		'H':  {0xfe, 0x10, 0x10, 0x10, 0xfe}, // H
		'I':  {0x00, 0x82, 0xfe, 0x82, 0x00}, // I
		'J':  {0x04, 0x02, 0x82, 0xfc, 0x80}, // J
		'K':  {0xfe, 0x10, 0x28, 0x44, 0x82}, // K
		'L':  {0xfe, 0x02, 0x02, 0x02, 0x02}, // L
		'M':  {0xfe, 0x40, 0x20, 0x40, 0xfe}, // M
		'N':  {0xfe, 0x20, 0x10, 0x08, 0xfe}, // N
		'O':  {0x7c, 0x82, 0x82, 0x82, 0x7c}, // O
		'Ö':  {0xbc, 0x42, 0x42, 0x42, 0xbc},
		'P':  {0xfe, 0x90, 0x90, 0x90, 0x60}, // P
		'Q':  {0x7c, 0x82, 0x8a, 0x84, 0x7a}, // Q
		'R':  {0xfe, 0x90, 0x98, 0x94, 0x62}, // R
		'S':  {0x62, 0x92, 0x92, 0x92, 0x8c}, // S
		'T':  {0x80, 0x80, 0xfe, 0x80, 0x80}, // T
		'U':  {0xfc, 0x02, 0x02, 0x02, 0xfc}, // U
		'V':  {0xf8, 0x04, 0x02, 0x04, 0xf8}, // V
		'W':  {0xfe, 0x04, 0x18, 0x04, 0xfe}, // W
		'X':  {0xc6, 0x28, 0x10, 0x28, 0xc6}, // X
		'Y':  {0xc0, 0x20, 0x1e, 0x20, 0xc0}, // Y
		'Z':  {0x86, 0x8a, 0x92, 0xa2, 0xc2}, // Z
		'[':  {0x00, 0x00, 0xfe, 0x82, 0x82}, // [
		'\\': {0x40, 0x20, 0x10, 0x08, 0x04}, // '\'
		']':  {0x82, 0x82, 0xfe, 0x00, 0x00}, // ]
		'^':  {0x20, 0x40, 0x80, 0x40, 0x20}, // ^
		'_':  {0x02, 0x02, 0x02, 0x02, 0x02}, // _
		'`':  {0x00, 0x80, 0x40, 0x20, 0x00}, // `
		'a':  {0x04, 0x2a, 0x2a, 0x2a, 0x1e}, // a
		'ä':  {0x44, 0x2a, 0x2a, 0x2a, 0x5e},
		'b':  {0xfe, 0x12, 0x22, 0x22, 0x1c}, // b
		'c':  {0x1c, 0x22, 0x22, 0x22, 0x04}, // c
		'd':  {0x1c, 0x22, 0x22, 0x12, 0xfe}, // d
		'e':  {0x1c, 0x2a, 0x2a, 0x2a, 0x18}, // e
		'f':  {0x10, 0x7e, 0x90, 0x80, 0x40}, // f
		'g':  {0x10, 0x28, 0x2a, 0x2a, 0x3c}, // g
		'h':  {0xfe, 0x10, 0x20, 0x20, 0x1e}, // h
		'i':  {0x00, 0x22, 0xbe, 0x02, 0x00}, // i
		'j':  {0x04, 0x02, 0x22, 0xbc, 0x00}, // j
		'k':  {0x00, 0xfe, 0x08, 0x14, 0x22}, // k
		'l':  {0x00, 0x82, 0xfe, 0x02, 0x00}, // l
		'm':  {0x3e, 0x20, 0x18, 0x20, 0x1e}, // m
		'n':  {0x3e, 0x10, 0x20, 0x20, 0x1e}, // n
		'o':  {0x1c, 0x22, 0x22, 0x22, 0x1c}, // o
		'ö':  {0x5c, 0x22, 0x22, 0x22, 0x5c},
		'p':  {0x3e, 0x28, 0x28, 0x28, 0x10}, // p
		'q':  {0x10, 0x28, 0x28, 0x18, 0x3e}, // q
		'r':  {0x3e, 0x10, 0x20, 0x20, 0x10}, // r
		's':  {0x12, 0x2a, 0x2a, 0x2a, 0x04}, // s
		't':  {0x20, 0xfc, 0x22, 0x02, 0x04}, // t
		'u':  {0x3c, 0x02, 0x02, 0x04, 0x3e}, // u
		'v':  {0x38, 0x04, 0x02, 0x04, 0x38}, // v
		'w':  {0x3c, 0x02, 0x0c, 0x02, 0x3c}, // w
		'x':  {0x22, 0x14, 0x08, 0x14, 0x22}, // x
		'y':  {0x30, 0x0a, 0x0a, 0x0a, 0x3c}, // y
		'z':  {0x22, 0x26, 0x2a, 0x32, 0x22}, // z
		'{':  {0x00, 0x10, 0x6c, 0x82, 0x00}, // [
		'|':  {0x00, 0x00, 0xfe, 0x00, 0x00}, // |
		'}':  {0x00, 0x82, 0x6c, 0x10, 0x00}, // ]
		'~':  {0x40, 0x80, 0xc0, 0x40, 0x80},
		'€':  {0x7c | 0x28, 0x82 | 0x28, 0x82 | 0x28, 0x82, 0x44},
	}

	result := make(map[rune]MonoBitmap)
	for s, dat := range tmp {
		bm := NewMonoBitmap(5, 7, false)
		//Rullataan lapi
		for x := 0; x < 5; x++ {
			for y := 0; y < 7; y++ {
				mask := byte(1 << byte(7-y))
				bm.SetPix(x, y, (dat[x]&mask) > 0)
				result[s] = bm
			}
		}
	}
	return result
}

func GetFont_8x8() MonoFont {
	tmp := map[rune][]byte{
		' ':  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},             //
		'!':  {0x00, 0x60, 0xfa, 0xfa, 0x60, 0x00, 0x00, 0x00},             // !
		'"':  {0x00, 0xe0, 0xe0, 0x00, 0xe0, 0xe0, 0x00, 0x00},             // "
		'#':  {0x28, 0xfe, 0xfe, 0x28, 0xfe, 0xfe, 0x28, 0x00},             // #
		'$':  {0x24, 0x74, 0xd6, 0xd6, 0x5c, 0x48, 0x00, 0x00},             // $
		'%':  {0x62, 0x66, 0x0c, 0x18, 0x30, 0x66, 0x46, 0x00},             // %
		'&':  {0x0c, 0x5e, 0xf2, 0xba, 0xec, 0x5e, 0x12, 0x00},             // &
		'\'': {0x20, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00},             // '
		'(':  {0x00, 0x38, 0x7c, 0xc6, 0x82, 0x00, 0x00, 0x00},             // (
		')':  {0x00, 0x82, 0xc6, 0x7c, 0x38, 0x00, 0x00, 0x00},             // )
		'*':  {0x10, 0x54, 0x7c, 0x38, 0x38, 0x7c, 0x54, 0x10},             // *
		'+':  {0x10, 0x10, 0x7c, 0x7c, 0x10, 0x10, 0x00, 0x00},             // +
		',':  {0x00, 0x05, 0x07, 0x06, 0x00, 0x00, 0x00, 0x00},             // ,
		'-':  {0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00},             // -
		'.':  {0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00},             // .
		'/':  {0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00},             // /
		'0':  {0x7c, 0xfe, 0x9a, 0xb2, 0xfe, 0x7c, 0x00, 0x00},             // 0
		'1':  {0x42, 0x42, 0xfe, 0xfe, 0x02, 0x02, 0x00, 0x00},             // 1
		'2':  {0x46, 0xce, 0x9a, 0x92, 0xf6, 0x66, 0x00, 0x00},             // 2
		'3':  {0x44, 0xc6, 0x92, 0x92, 0xfe, 0x6c, 0x00, 0x00},             // 3
		'4':  {0x18, 0x38, 0x68, 0xc8, 0xfe, 0xfe, 0x08, 0x00},             // 4
		'5':  {0xe4, 0xe6, 0xa2, 0xa2, 0xbe, 0x9c, 0x00, 0x00},             // 5
		'6':  {0x3c, 0x7e, 0xd2, 0x92, 0x9e, 0x0c, 0x00, 0x00},             // 6
		'7':  {0xc0, 0xc6, 0x8e, 0x98, 0xf0, 0xe0, 0x00, 0x00},             // 7
		'8':  {0x6c, 0xfe, 0x92, 0x92, 0xfe, 0x6c, 0x00, 0x00},             // 8
		'9':  {0x60, 0xf2, 0x92, 0x96, 0xfc, 0x78, 0x00, 0x00},             // 9
		':':  {0x00, 0x00, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00},             // :
		';':  {0x00, 0x05, 0x37, 0x36, 0x00, 0x00, 0x00, 0x00},             // ;
		'<':  {0x10, 0x38, 0x6c, 0xc6, 0x82, 0x00, 0x00, 0x00},             // <
		'=':  {0x28, 0x28, 0x28, 0x28, 0x28, 0x28, 0x00, 0x00},             // =
		'>':  {0x00, 0x82, 0xc6, 0x6c, 0x38, 0x10, 0x00, 0x00},             // >
		'?':  {0x40, 0xc0, 0x8a, 0x9a, 0xf0, 0x60, 0x00, 0x00},             // ?
		'@':  {0x7c, 0xfe, 0x82, 0xba, 0xba, 0xf8, 0x78, 0x00},             // @
		'A':  {0x3e, 0x7e, 0xc8, 0xc8, 0x7e, 0x3e, 0x00, 0x00},             // A
		'Ä':  {0x3e + 128, 0x7e, 0xc8, 0xc8, 0x7e, 0x3e + 128, 0x00, 0x00}, //Ä
		'B':  {0x82, 0xfe, 0xfe, 0x92, 0x92, 0xfe, 0x6c, 0x00},             // B
		'C':  {0x38, 0x7c, 0xc6, 0x82, 0x82, 0xc6, 0x44, 0x00},             // C
		'D':  {0x82, 0xfe, 0xfe, 0x82, 0xc6, 0xfe, 0x38, 0x00},             // D
		'E':  {0x82, 0xfe, 0xfe, 0x92, 0xba, 0x82, 0xc6, 0x00},             // E
		'F':  {0x82, 0xfe, 0xfe, 0x92, 0xb8, 0x80, 0xc0, 0x00},             // F
		'G':  {0x38, 0x7c, 0xc6, 0x82, 0x8a, 0xce, 0x4e, 0x00},             // G
		'H':  {0xfe, 0xfe, 0x10, 0x10, 0xfe, 0xfe, 0x00, 0x00},             // H
		'I':  {0x00, 0x82, 0xfe, 0xfe, 0x82, 0x00, 0x00, 0x00},             // I
		'J':  {0x0c, 0x0e, 0x02, 0x82, 0xfe, 0xfc, 0x80, 0x00},             // J
		'K':  {0x82, 0xfe, 0xfe, 0x10, 0x38, 0xee, 0xc6, 0x00},             // K
		'L':  {0x82, 0xfe, 0xfe, 0x82, 0x02, 0x06, 0x0e, 0x00},             // L
		'M':  {0xfe, 0xfe, 0x60, 0x30, 0x60, 0xfe, 0xfe, 0x00},             // M
		'N':  {0xfe, 0xfe, 0x60, 0x30, 0x18, 0xfe, 0xfe, 0x00},             // N
		'O':  {0x38, 0x7c, 0xc6, 0x82, 0xc6, 0x7c, 0x38, 0x00},             // O
		'Ö':  {0x38 + 128, 0x7c, 0xc6, 0x82, 0xc6, 0x7c, 0x38 + 128, 0x00}, // Ö
		'P':  {0x82, 0xfe, 0xfe, 0x92, 0x90, 0xf0, 0x60, 0x00},             // P
		'Q':  {0x78, 0xfc, 0x84, 0x8e, 0xfe, 0x7a, 0x00, 0x00},             // Q
		'R':  {0x82, 0xfe, 0xfe, 0x98, 0x9c, 0xf6, 0x62, 0x00},             // R
		'S':  {0x64, 0xe6, 0xb2, 0x9a, 0xde, 0x4c, 0x00, 0x00},             // S
		'T':  {0xc0, 0x82, 0xfe, 0xfe, 0x82, 0xc0, 0x00, 0x00},             // T
		'U':  {0xfe, 0xfe, 0x02, 0x02, 0xfe, 0xfe, 0x00, 0x00},             // U
		'V':  {0xf8, 0xfc, 0x06, 0x06, 0xfc, 0xf8, 0x00, 0x00},             // V
		'W':  {0xfe, 0xfe, 0x0c, 0x18, 0x0c, 0xfe, 0xfe, 0x00},             // W
		'X':  {0xc6, 0xee, 0x38, 0x10, 0x38, 0xee, 0xc6, 0x00},             // X
		'Y':  {0xe0, 0xf2, 0x1e, 0x1e, 0xf2, 0xe0, 0x00, 0x00},             // Y
		'Z':  {0xe6, 0xce, 0x9a, 0xb2, 0xe2, 0xc6, 0x8e, 0x00},             // Z
		'[':  {0x00, 0xfe, 0xfe, 0x82, 0x82, 0x00, 0x00, 0x00},             // [
		'\\': {0x80, 0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00},             // '\'
		']':  {0x00, 0x82, 0x82, 0xfe, 0xfe, 0x00, 0x00, 0x00},             // ]
		'^':  {0x10, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x10, 0x00},             // ^
		'_':  {0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01},             // _
		'`':  {0x00, 0x00, 0xc0, 0xe0, 0x20, 0x00, 0x00, 0x00},             // `
		'a':  {0x04, 0x2e, 0x2a, 0x2a, 0x3c, 0x1e, 0x02, 0x00},             // a
		'ä':  {0x04 + 64, 0x2e, 0x2a, 0x2a, 0x3c, 0x1e + 64, 0x02, 0x00},   // ä
		'b':  {0x82, 0xfc, 0xfe, 0x22, 0x22, 0x3e, 0x1c, 0x00},             // b
		'c':  {0x1c, 0x3e, 0x22, 0x22, 0x36, 0x14, 0x00, 0x00},             // c
		'd':  {0x0c, 0x1e, 0x12, 0x92, 0xfc, 0xfe, 0x02, 0x00},             // d
		'e':  {0x1c, 0x3e, 0x2a, 0x2a, 0x3a, 0x18, 0x00, 0x00},             // e
		'f':  {0x12, 0x7e, 0xfe, 0x92, 0xc0, 0x40, 0x00, 0x00},             // f
		'g':  {0x19, 0x3d, 0x25, 0x25, 0x1f, 0x3e, 0x20, 0x00},             // g
		'h':  {0x82, 0xfe, 0xfe, 0x10, 0x20, 0x3e, 0x1e, 0x00},             // h
		'i':  {0x00, 0x22, 0xbe, 0xbe, 0x02, 0x00, 0x00, 0x00},             // i
		'j':  {0x02, 0x23, 0x21, 0xbf, 0xbe, 0x00, 0x00, 0x00},             // j
		'k':  {0x82, 0xfe, 0xfe, 0x08, 0x1c, 0x36, 0x22, 0x00},             // k
		'l':  {0x00, 0x82, 0xfe, 0xfe, 0x02, 0x00, 0x00, 0x00},             // l
		'm':  {0x3e, 0x3e, 0x30, 0x18, 0x30, 0x3e, 0x1e, 0x00},             // m
		'n':  {0x3e, 0x3e, 0x20, 0x20, 0x3e, 0x1e, 0x00, 0x00},             // n
		'o':  {0x1c, 0x3e, 0x22, 0x22, 0x3e, 0x1c, 0x00, 0x00},             // o
		'ö':  {0x1c + 64, 0x3e, 0x22, 0x22, 0x3e, 0x1c + 64, 0x00, 0x00},   // ö
		'p':  {0x21, 0x3f, 0x1f, 0x25, 0x24, 0x3c, 0x18, 0x00},             // p
		'q':  {0x18, 0x3c, 0x24, 0x25, 0x1f, 0x3f, 0x21, 0x00},             // q
		'r':  {0x22, 0x3e, 0x1e, 0x22, 0x38, 0x18, 0x00, 0x00},             // r
		's':  {0x12, 0x3a, 0x2a, 0x2a, 0x2e, 0x24, 0x00, 0x00},             // s
		't':  {0x00, 0x20, 0x7c, 0xfe, 0x22, 0x24, 0x00, 0x00},             // t
		'u':  {0x3c, 0x3e, 0x02, 0x02, 0x3c, 0x3e, 0x02, 0x00},             // u
		'v':  {0x38, 0x3c, 0x06, 0x06, 0x3c, 0x38, 0x00, 0x00},             // v
		'w':  {0x3c, 0x3e, 0x06, 0x0c, 0x06, 0x3e, 0x3c, 0x00},             // w
		'x':  {0x22, 0x36, 0x1c, 0x08, 0x1c, 0x36, 0x22, 0x00},             // x
		'y':  {0x39, 0x3d, 0x05, 0x05, 0x3f, 0x3e, 0x00, 0x00},             // y
		'z':  {0x32, 0x26, 0x2e, 0x3a, 0x32, 0x26, 0x00, 0x00},             // z
		'{':  {0x10, 0x10, 0x7c, 0xee, 0x82, 0x82, 0x00, 0x00},             // {
		'|':  {0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00},             // |
		'}':  {0x82, 0x82, 0xee, 0x7c, 0x10, 0x10, 0x00, 0x00},             // }
		'~':  {0x40, 0xc0, 0x80, 0xc0, 0x40, 0xc0, 0x80, 0x00},             // ~
		'€':  {0x38, 0x7c, 0xe6 + 8, 0xA2 + 8, 0xA2 + 8, 0xc6, 0x44, 0x00},
	}

	result := make(map[rune]MonoBitmap)
	for s, dat := range tmp {
		bm := NewMonoBitmap(8, 8, false)
		for x := 0; x < 8; x++ {
			for y := 0; y < 8; y++ {
				mask := byte(1 << byte(7-y))
				bm.SetPix(x, y, (dat[x]&mask) > 0)
				result[s] = bm
			}
		}
	}
	return result
}

func GetFont_11x16() MonoFont {
	tmp := map[rune][]uint16{
		' ':  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},                                                   // ' '  32
		'!':  {0, 0, 0, 124, 13311, 13311, 124, 0, 0, 0, 0},                                       // '!'  33
		'"':  {0, 0, 60, 60, 0, 0, 60, 60, 0, 0, 0},                                               // '"'  34
		'#':  {512, 7696, 8080, 1008, 638, 7710, 8080, 1008, 638, 30, 16},                         // '#'  35
		'$':  {0, 1144, 3324, 3276, 16383, 16383, 3276, 4044, 1928, 0, 0},                         // '$'  36
		'%':  {12288, 14392, 7224, 3640, 1792, 896, 448, 14560, 14448, 14392, 28},                 // '%'  37
		'&':  {0, 7936, 16312, 12796, 8646, 14306, 7742, 7196, 13824, 8704, 0},                    // '&'  38
		'\'': {0, 0, 0, 39, 63, 31, 0, 0, 0, 0, 0},                                                // '''  39
		'(':  {0, 0, 1008, 4092, 8190, 14343, 8193, 8193, 0, 0, 0},                                // '('  40
		')':  {0, 0, 8193, 8193, 14343, 8190, 4092, 1008, 0, 0, 0},                                // ')'  41
		'*':  {0, 3224, 3768, 992, 4088, 4088, 992, 3768, 3224, 0, 0},                             // '*'  42
		'+':  {0, 384, 384, 384, 4080, 4080, 384, 384, 384, 0, 0},                                 // '+'  43
		',':  {0, 0, 0, 47104, 63488, 30720, 0, 0, 0, 0, 0},                                       // ','  44
		'-':  {0, 384, 384, 384, 384, 384, 384, 384, 384, 0, 0},                                   // '-'  45
		'.':  {0, 0, 0, 14336, 14336, 14336, 0, 0, 0, 0, 0},                                       // '.'  46
		'/':  {6144, 7168, 3584, 1792, 896, 448, 224, 112, 56, 28, 14},                            // '/'  47
		'0':  {2040, 8190, 7686, 13059, 12675, 12483, 12387, 12339, 6174, 8190, 2040},             // '0'  48
		'1':  {0, 0, 12300, 12300, 12302, 16383, 16383, 12288, 12288, 12288, 0},                   // '1'  49
		'2':  {12316, 14366, 15367, 15875, 14083, 13187, 12739, 12515, 12407, 12350, 12316},       // '2'  50
		'3':  {3084, 7182, 14343, 12483, 12483, 12483, 12483, 12483, 14823, 8062, 3644},           // '3'  51
		'4':  {960, 992, 880, 824, 796, 782, 775, 16383, 16383, 768, 768},                         // '4'  52
		'5':  {3135, 7295, 14435, 12387, 12387, 12387, 12387, 12387, 14563, 8131, 3971},           // '5'  53
		'6':  {4032, 8176, 14840, 12508, 12494, 12487, 12483, 12483, 14787, 8064, 3840},           // '6'  54
		'7':  {3, 3, 3, 12291, 15363, 3843, 963, 243, 63, 15, 3},                                  // '7'  55
		'8':  {3840, 8124, 14846, 12519, 12483, 12483, 12483, 12519, 14846, 8124, 3840},           // '8'  56
		'9':  {60, 126, 12519, 12483, 12483, 14531, 7363, 3779, 2023, 1022, 252},                  // '9'  57
		':':  {0, 0, 0, 7280, 7280, 7280, 0, 0, 0, 0, 0},                                          // ':'  58
		';':  {0, 0, 0, 40048, 64624, 31856, 0, 0, 0, 0, 0},                                       // ';'  59
		'<':  {0, 192, 480, 1008, 1848, 3612, 7182, 14343, 12291, 0, 0},                           // '<'  60
		'=':  {0, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 0},                        // '='  61
		'>':  {0, 12291, 14343, 7182, 3612, 1848, 1008, 480, 192, 0, 0},                           // '>'  62
		'?':  {28, 30, 7, 3, 14211, 14275, 227, 119, 62, 28, 0},                                   // '?'  63
		'@':  {4088, 8190, 6151, 13299, 14331, 13851, 14331, 14331, 13831, 1022, 504},             // '@'  64
		'A':  {14336, 16128, 2016, 1788, 1567, 1567, 1788, 2016, 16128, 14336, 0},                 // 'A'  65
		'Ä':  {14336 + 7, 16128 + 7, 2016, 1788, 1567, 1567, 1788, 2016, 16128 + 7, 14336 + 7, 0}, // 'A'  65
		'B':  {16383, 16383, 12483, 12483, 12483, 12483, 12519, 14846, 8124, 3840, 0},             // 'B'  66
		'C':  {1008, 4092, 7182, 14343, 12291, 12291, 12291, 14343, 7182, 3084, 0},                // 'C'  67
		'D':  {16383, 16383, 12291, 12291, 12291, 12291, 14343, 7182, 4092, 1008, 0},              // 'D'  68
		'E':  {16383, 16383, 12483, 12483, 12483, 12483, 12483, 12483, 12291, 12291, 0},           // 'E'  69
		'F':  {16383, 16383, 195, 195, 195, 195, 195, 195, 3, 3, 0},                               // 'F'  70
		'G':  {1008, 4092, 7182, 14343, 12291, 12483, 12483, 12483, 16327, 16326, 0},              // 'G'  71
		'H':  {16383, 16383, 192, 192, 192, 192, 192, 192, 16383, 16383, 0},                       // 'H'  72
		'I':  {0, 0, 12291, 12291, 16383, 16383, 12291, 12291, 0, 0, 0},                           // 'I'  73
		'J':  {3584, 7680, 14336, 12288, 12288, 12288, 12288, 14336, 8191, 2047, 0},               // 'J'  74
		'K':  {16383, 16383, 192, 480, 1008, 1848, 3612, 7182, 14343, 12291, 0},                   // 'K'  75
		'L':  {16383, 16383, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 12288, 0},           // 'L'  76
		'M':  {16383, 16383, 30, 120, 480, 480, 120, 30, 16383, 16383, 0},                         // 'M'  77
		'N':  {16383, 16383, 14, 56, 240, 960, 1792, 7168, 16383, 16383, 0},                       // 'N'  78
		'O':  {1008, 4092, 7182, 14343, 12291, 12291, 14343, 7182, 4092, 1008, 0},                 // 'O'  79
		'Ö':  {1008 | 3, 4092 | 3, 7182, 14343, 12291, 12291, 14343, 7182, 4092 | 3, 1008 | 3, 0},
		'P':  {16383, 16383, 387, 387, 387, 387, 387, 455, 254, 124, 0},                     // 'P'  80
		'Q':  {1008, 4092, 7182, 14343, 12291, 13827, 15879, 7182, 16380, 13296, 0},         // 'Q'  81
		'R':  {16383, 16383, 387, 387, 899, 1923, 3971, 7623, 14590, 12412, 0},              // 'R'  82
		'S':  {3132, 7294, 14567, 12483, 12483, 12483, 12483, 14791, 8078, 3852, 0},         // 'S'  83
		'T':  {0, 3, 3, 3, 16383, 16383, 3, 3, 3, 0, 0},                                     // 'T'  84
		'U':  {2047, 8191, 14336, 12288, 12288, 12288, 12288, 14336, 8191, 2047, 0},         // 'U'  85
		'V':  {7, 63, 504, 4032, 15872, 15872, 4032, 504, 63, 7, 0},                         // 'V'  86
		'W':  {16383, 16383, 7168, 1536, 896, 896, 1536, 7168, 16383, 16383, 0},             // 'W'  87
		'X':  {12291, 15375, 3612, 816, 480, 480, 816, 3612, 15375, 12291, 0},               // 'X'  88
		'Y':  {3, 15, 60, 240, 16320, 16320, 240, 60, 15, 3, 0},                             // 'Y'  89
		'Z':  {12291, 15363, 15875, 13059, 12739, 12515, 12339, 12319, 12303, 12291, 0},     // 'Z'  90
		'[':  {0, 0, 16383, 16383, 12291, 12291, 12291, 12291, 0, 0, 0},                     // '['  91
		'\\': {14, 28, 56, 112, 224, 448, 896, 1792, 3584, 7168, 6144},                      // '\'  92
		']':  {0, 0, 12291, 12291, 12291, 12291, 16383, 16383, 0, 0, 0},                     // ']'  93
		'^':  {96, 112, 56, 28, 14, 7, 14, 28, 56, 112, 96},                                 // '^'  94
		'_':  {49152, 49152, 49152, 49152, 49152, 49152, 49152, 49152, 49152, 49152, 49152}, // '_'  95
		'`':  {0, 0, 0, 0, 62, 126, 78, 0, 0, 0, 0},                                         // '`'  96
		'a':  {7168, 15936, 13152, 13152, 13152, 13152, 13152, 13152, 16352, 16320, 0},      // 'a'  97
		'ä':  {7168 + 12, 15936 + 12, 13152, 13152, 13152, 13152, 13152, 13152, 16352 + 12, 16320 + 12, 0},
		'b':  {16383, 16383, 12480, 12384, 12384, 12384, 12384, 14560, 8128, 3968, 0}, // 'b'  98
		'c':  {3968, 8128, 14560, 12384, 12384, 12384, 12384, 12384, 6336, 2176, 0},   // 'c'  99
		'd':  {3968, 8128, 14560, 12384, 12384, 12384, 12512, 12480, 16383, 16383, 0}, // 'd' 100
		'e':  {3968, 8128, 15328, 13152, 13152, 13152, 13152, 13152, 5056, 384, 0},    // 'e' 101
		'f':  {192, 192, 16380, 16382, 199, 195, 195, 3, 0, 0, 0},                     // 'f' 102
		'g':  {896, 51136, 52960, 52320, 52320, 52320, 52320, 58976, 32736, 16352, 0}, // 'g' 103
		'h':  {16383, 16383, 192, 96, 96, 96, 224, 16320, 16256, 0, 0},                // 'h' 104
		'i':  {0, 0, 12288, 12384, 16364, 16364, 12288, 12288, 0, 0, 0},               // 'i' 105
		'j':  {0, 0, 24576, 57344, 49152, 49248, 65516, 32748, 0, 0, 0},               // 'j' 106
		'k':  {0, 16383, 16383, 768, 1920, 4032, 7392, 14432, 12288, 0, 0},            // 'k' 107
		'l':  {0, 0, 12288, 12291, 16383, 16383, 12288, 12288, 0, 0, 0},               // 'l' 108
		'm':  {16352, 16320, 224, 224, 16320, 16320, 224, 224, 16320, 16256, 0},       // 'm' 109
		'n':  {0, 16352, 16352, 96, 96, 96, 96, 224, 16320, 16256, 0},                 // 'n' 110
		'o':  {3968, 8128, 14560, 12384, 12384, 12384, 12384, 14560, 8128, 3968, 0},   // 'o' 111
		'ö':  {3968 | 12, 8128 | 12, 14560, 12384, 12384, 12384, 12384, 14560, 8128 | 12, 3968 | 12, 0},
		'p':  {65504, 65504, 3168, 6240, 6240, 6240, 6240, 7392, 4032, 1920, 0},      // 'p' 112
		'q':  {1920, 4032, 7392, 6240, 6240, 6240, 6240, 3168, 65504, 65504, 0},      // 'q' 113
		'r':  {0, 16352, 16352, 192, 96, 96, 96, 96, 224, 192, 0},                    // 'r' 114
		's':  {4544, 13280, 13152, 13152, 13152, 13152, 16224, 7744, 0, 0, 0},        // 's' 115
		't':  {96, 96, 8190, 16382, 12384, 12384, 12384, 12288, 0, 0, 0},             // 't' 116
		'u':  {4064, 8160, 14336, 12288, 12288, 12288, 12288, 6144, 16352, 16352, 0}, // 'u' 117
		'v':  {96, 480, 1920, 7680, 14336, 14336, 7680, 1920, 480, 96, 0},            // 'v' 118
		'w':  {2016, 8160, 14336, 7168, 4064, 4064, 7168, 14336, 8160, 2016, 0},      // 'w' 119
		'x':  {12384, 14560, 7616, 3968, 1792, 3968, 7616, 14560, 12384, 0, 0},       // 'x' 120
		'y':  {0, 96, 33248, 59264, 32256, 7680, 1920, 480, 96, 0, 0},                // 'y' 121
		'z':  {12384, 14432, 15456, 13920, 13152, 12768, 12512, 12384, 12320, 0, 0},  // 'z' 122
		'{':  {0, 128, 448, 8188, 16254, 28679, 24579, 24579, 24579, 0, 0},           // '{' 123
		'|':  {0, 0, 0, 0, 16383, 16383, 0, 0, 0, 0, 0},                              // '|' 124
		'}':  {0, 24579, 24579, 24579, 28679, 16254, 8188, 448, 128, 0, 0},           // '}' 125
		'~':  {16, 24, 12, 4, 12, 24, 16, 24, 12, 4, 0},                              // '~' 126
		'€':  {1008 | 1632, 4092 | 1632, 7182 | 1632, 14343 | 1632, 12291 | 1632, 12291 | 1632, 12291 | 1632, 14343, 7182, 3084, 0},
	}

	result := make(map[rune]MonoBitmap)
	for s, dat := range tmp {
		bm := NewMonoBitmap(11, 16, false)
		for x := 0; x < 11; x++ {
			for y := 0; y < 16; y++ {
				mask := uint16(1 << uint16(y))
				bm.SetPix(x, y, (dat[x]&mask) > 0)
				result[s] = bm
			}
		}
	}
	return result
}
