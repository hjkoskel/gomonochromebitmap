// Some fonts for gomonochromebitmap
package gomonochromebitmap


/*
TODO 3x3 font
https://en.wikipedia.org/wiki/3x3

TODO 4x4 font

TODO 3x4 font
http://atariage.com/forums/uploads/monthly_06_2012/post-3056-0-78298600-1340226009.gif


6x8 ja 6x6 fontit
http://merthsoft.com/linkguide/ti83+/tokens.html

*/
    
func GetFont_5x7() map[rune]MonoBitmap{
    tmp:=map[rune][]byte{
             ' ':[]byte{0x00,0x00,0x00,0x00,0x00}, //
        '!':[]byte{0x00,0x00,0xfa,0x00,0x00}, // !
        '"':[]byte{0x00,0xe0,0x00,0xe0,0x00}, // "
'#':[]byte{0x28,0xfe,0x28,0xfe,0x28}, // #
'$':[]byte{0x24,0x54,0xfe,0x54,0x48}, // $
'%':[]byte{0xc4,0xc8,0x10,0x26,0x46}, // %
'&':[]byte{0x6c,0x92,0xaa,0x44,0x0a}, // &
'\'':[]byte{0x00,0xa0,0xc0,0x00,0x00}, // '
'(':[]byte{0x00,0x38,0x44,0x82,0x00}, // (
')':[]byte{0x00,0x82,0x44,0x38,0x00}, // )
'*':[]byte{0x10,0x54,0x38,0x54,0x10}, // *
'+':[]byte{0x00,0x0a,0x0c,0x00,0x00}, // ,
'-':[]byte{0x10,0x10,0x10,0x10,0x10}, // -
'.':[]byte{0x00,0x06,0x06,0x00,0x00}, // .
'/':[]byte{0x04,0x08,0x10,0x20,0x40}, // /
'0':[]byte{0x7c,0x8a,0x92,0xa2,0x7c}, // 0
'1':[]byte{0x00,0x42,0xfe,0x02,0x00}, // 1
'2':[]byte{0x42,0x86,0x8a,0x92,0x62}, // 2
'3':[]byte{0x84,0x82,0xa2,0xd2,0x8c}, // 3
'4':[]byte{0x18,0x28,0x48,0xfe,0x08}, // 4
'5':[]byte{0xe4,0xa2,0xa2,0xa2,0x9c}, // 5
'6':[]byte{0x3c,0x52,0x92,0x92,0x0c}, // 6
'7':[]byte{0x80,0x8e,0x90,0xa0,0xc0}, // 7
'8':[]byte{0x6c,0x92,0x92,0x92,0x6c}, // 8
'9':[]byte{0x60,0x92,0x92,0x94,0x78}, // 9
':':[]byte{0x00,0x6c,0x6c,0x00,0x00}, // :
';':[]byte{0x00,0x6a,0x6c,0x00,0x00}, // ;
'<':[]byte{0x00,0x10,0x28,0x44,0x82}, // <
'=':[]byte{0x28,0x28,0x28,0x28,0x28}, // =
'>':[]byte{0x82,0x44,0x28,0x10,0x00}, // >
'?':[]byte{0x40,0x80,0x8a,0x90,0x60}, // ?
'@':[]byte{0x4c,0x92,0x9e,0x82,0x7c}, // @
'A':[]byte{0x7e,0x88,0x88,0x88,0x7e}, // A
'B':[]byte{0xfe,0x92,0x92,0x92,0x6c}, // B
'C':[]byte{0x7c,0x82,0x82,0x82,0x44}, // C
'D':[]byte{0xfe,0x82,0x82,0x44,0x38}, // D
'E':[]byte{0xfe,0x92,0x92,0x92,0x82}, // E
'F':[]byte{0xfe,0x90,0x90,0x80,0x80}, // F
'G':[]byte{0x7c,0x82,0x82,0x8a,0x4c}, // G
'H':[]byte{0xfe,0x10,0x10,0x10,0xfe}, // H
'I':[]byte{0x00,0x82,0xfe,0x82,0x00}, // I
'J':[]byte{0x04,0x02,0x82,0xfc,0x80}, // J
'K':[]byte{0xfe,0x10,0x28,0x44,0x82}, // K
'L':[]byte{0xfe,0x02,0x02,0x02,0x02}, // L
'M':[]byte{0xfe,0x40,0x20,0x40,0xfe}, // M
'N':[]byte{0xfe,0x20,0x10,0x08,0xfe}, // N
'O':[]byte{0x7c,0x82,0x82,0x82,0x7c}, // O
'P':[]byte{0xfe,0x90,0x90,0x90,0x60}, // P
'Q':[]byte{0x7c,0x82,0x8a,0x84,0x7a}, // Q
'R':[]byte{0xfe,0x90,0x98,0x94,0x62}, // R
'S':[]byte{0x62,0x92,0x92,0x92,0x8c}, // S
'T':[]byte{0x80,0x80,0xfe,0x80,0x80}, // T
'U':[]byte{0xfc,0x02,0x02,0x02,0xfc}, // U
'V':[]byte{0xf8,0x04,0x02,0x04,0xf8}, // V
'W':[]byte{0xfe,0x04,0x18,0x04,0xfe}, // W
'X':[]byte{0xc6,0x28,0x10,0x28,0xc6}, // X
'Y':[]byte{0xc0,0x20,0x1e,0x20,0xc0}, // Y
'Z':[]byte{0x86,0x8a,0x92,0xa2,0xc2}, // Z
'[':[]byte{0x00,0x00,0xfe,0x82,0x82}, // [
'\\':[]byte{0x40,0x20,0x10,0x08,0x04}, // '\'
']':[]byte{0x82,0x82,0xfe,0x00,0x00}, // ]
'^':[]byte{0x20,0x40,0x80,0x40,0x20}, // ^
'_':[]byte{0x02,0x02,0x02,0x02,0x02}, // _
'`':[]byte{0x00,0x80,0x40,0x20,0x00}, // `
'a':[]byte{0x04,0x2a,0x2a,0x2a,0x1e}, // a
'b':[]byte{0xfe,0x12,0x22,0x22,0x1c}, // b
'c':[]byte{0x1c,0x22,0x22,0x22,0x04}, // c
'd':[]byte{0x1c,0x22,0x22,0x12,0xfe}, // d
'e':[]byte{0x1c,0x2a,0x2a,0x2a,0x18}, // e
'f':[]byte{0x10,0x7e,0x90,0x80,0x40}, // f
'g':[]byte{0x10,0x28,0x2a,0x2a,0x3c}, // g
'h':[]byte{0xfe,0x10,0x20,0x20,0x1e}, // h
'i':[]byte{0x00,0x22,0xbe,0x02,0x00}, // i
'j':[]byte{0x04,0x02,0x22,0xbc,0x00}, // j
'k':[]byte{0x00,0xfe,0x08,0x14,0x22}, // k
'l':[]byte{0x00,0x82,0xfe,0x02,0x00}, // l
'm':[]byte{0x3e,0x20,0x18,0x20,0x1e}, // m
'n':[]byte{0x3e,0x10,0x20,0x20,0x1e}, // n
'o':[]byte{0x1c,0x22,0x22,0x22,0x1c}, // o
'p':[]byte{0x3e,0x28,0x28,0x28,0x10}, // p
'q':[]byte{0x10,0x28,0x28,0x18,0x3e}, // q
'r':[]byte{0x3e,0x10,0x20,0x20,0x10}, // r
's':[]byte{0x12,0x2a,0x2a,0x2a,0x04}, // s
't':[]byte{0x20,0xfc,0x22,0x02,0x04}, // t
'u':[]byte{0x3c,0x02,0x02,0x04,0x3e}, // u
'v':[]byte{0x38,0x04,0x02,0x04,0x38}, // v
'w':[]byte{0x3c,0x02,0x0c,0x02,0x3c}, // w
'x':[]byte{0x22,0x14,0x08,0x14,0x22}, // x
'y':[]byte{0x30,0x0a,0x0a,0x0a,0x3c}, // y
'z':[]byte{0x22,0x26,0x2a,0x32,0x22}, // z
//'[':[]byte{0x00,0x10,0x6c,0x82,0x00}, // [
'|':[]byte{0x00,0x00,0xfe,0x00,0x00}, // |
//']':[]byte{0x00,0x82,0x6c,0x10,0x00}, // ]
'~':[]byte{0x40,0x80,0xc0,0x40,0x80},   
    }
    
    result:=make(map[rune]MonoBitmap)
    for s,dat:=range tmp{
        bm:=NewMonoBitmap(5,7,false)    
        //Rullataan lapi
        for x:=0;x<5;x++{
            for y:=0;y<7;y++{
                mask:=byte(1<<byte(7-y))
                bm.SetPix(x,y,(dat[x]&mask)>0)
                result[s]=bm
            }
        }        
    }
    return result        
}
    
    
    
    
func GetFont_8x8() map[rune]MonoBitmap{
    tmp:=map[rune][]byte{
        ' ':[]byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, //
'!':[]byte{0x00,0x60,0xfa,0xfa,0x60,0x00,0x00,0x00}, // !
'"':[]byte{0x00,0xe0,0xe0,0x00,0xe0,0xe0,0x00,0x00}, // "
'#':[]byte{0x28,0xfe,0xfe,0x28,0xfe,0xfe,0x28,0x00}, // #
'$':[]byte{0x24,0x74,0xd6,0xd6,0x5c,0x48,0x00,0x00}, // $
'%':[]byte{0x62,0x66,0x0c,0x18,0x30,0x66,0x46,0x00}, // %
'&':[]byte{0x0c,0x5e,0xf2,0xba,0xec,0x5e,0x12,0x00}, // &
'\'':[]byte{0x20,0xe0,0xc0,0x00,0x00,0x00,0x00,0x00}, // '
'(':[]byte{0x00,0x38,0x7c,0xc6,0x82,0x00,0x00,0x00}, // (
')':[]byte{0x00,0x82,0xc6,0x7c,0x38,0x00,0x00,0x00}, // )
'*':[]byte{0x10,0x54,0x7c,0x38,0x38,0x7c,0x54,0x10}, // *
'+':[]byte{0x10,0x10,0x7c,0x7c,0x10,0x10,0x00,0x00}, // +
',':[]byte{0x00,0x05,0x07,0x06,0x00,0x00,0x00,0x00}, // ,
'-':[]byte{0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00}, // -
'.':[]byte{0x00,0x00,0x06,0x06,0x00,0x00,0x00,0x00}, // .
'/':[]byte{0x06,0x0c,0x18,0x30,0x60,0xc0,0x80,0x00}, // /
'0':[]byte{0x7c,0xfe,0x9a,0xb2,0xfe,0x7c,0x00,0x00}, // 0
'1':[]byte{0x42,0x42,0xfe,0xfe,0x02,0x02,0x00,0x00}, // 1
'2':[]byte{0x46,0xce,0x9a,0x92,0xf6,0x66,0x00,0x00}, // 2
'3':[]byte{0x44,0xc6,0x92,0x92,0xfe,0x6c,0x00,0x00}, // 3
'4':[]byte{0x18,0x38,0x68,0xc8,0xfe,0xfe,0x08,0x00}, // 4
'5':[]byte{0xe4,0xe6,0xa2,0xa2,0xbe,0x9c,0x00,0x00}, // 5
'6':[]byte{0x3c,0x7e,0xd2,0x92,0x9e,0x0c,0x00,0x00}, // 6
'7':[]byte{0xc0,0xc6,0x8e,0x98,0xf0,0xe0,0x00,0x00}, // 7
'8':[]byte{0x6c,0xfe,0x92,0x92,0xfe,0x6c,0x00,0x00}, // 8
'9':[]byte{0x60,0xf2,0x92,0x96,0xfc,0x78,0x00,0x00}, // 9
':':[]byte{0x00,0x00,0x36,0x36,0x00,0x00,0x00,0x00}, // :
';':[]byte{0x00,0x05,0x37,0x36,0x00,0x00,0x00,0x00}, // ;
'<':[]byte{0x10,0x38,0x6c,0xc6,0x82,0x00,0x00,0x00}, // <
'=':[]byte{0x28,0x28,0x28,0x28,0x28,0x28,0x00,0x00}, // =
'>':[]byte{0x00,0x82,0xc6,0x6c,0x38,0x10,0x00,0x00}, // >
'?':[]byte{0x40,0xc0,0x8a,0x9a,0xf0,0x60,0x00,0x00}, // ?
'@':[]byte{0x7c,0xfe,0x82,0xba,0xba,0xf8,0x78,0x00}, // @
'A':[]byte{0x3e,0x7e,0xc8,0xc8,0x7e,0x3e,0x00,0x00}, // A
'Ä':[]byte{0x3e+128,0x7e,0xc8,0xc8,0x7e,0x3e+128,0x00,0x00}, //Ä
'B':[]byte{0x82,0xfe,0xfe,0x92,0x92,0xfe,0x6c,0x00}, // B
'C':[]byte{0x38,0x7c,0xc6,0x82,0x82,0xc6,0x44,0x00}, // C
'D':[]byte{0x82,0xfe,0xfe,0x82,0xc6,0xfe,0x38,0x00}, // D
'E':[]byte{0x82,0xfe,0xfe,0x92,0xba,0x82,0xc6,0x00}, // E
'F':[]byte{0x82,0xfe,0xfe,0x92,0xb8,0x80,0xc0,0x00}, // F
'G':[]byte{0x38,0x7c,0xc6,0x82,0x8a,0xce,0x4e,0x00}, // G
'H':[]byte{0xfe,0xfe,0x10,0x10,0xfe,0xfe,0x00,0x00}, // H
'I':[]byte{0x00,0x82,0xfe,0xfe,0x82,0x00,0x00,0x00}, // I
'J':[]byte{0x0c,0x0e,0x02,0x82,0xfe,0xfc,0x80,0x00}, // J
'K':[]byte{0x82,0xfe,0xfe,0x10,0x38,0xee,0xc6,0x00}, // K
'L':[]byte{0x82,0xfe,0xfe,0x82,0x02,0x06,0x0e,0x00}, // L
'M':[]byte{0xfe,0xfe,0x60,0x30,0x60,0xfe,0xfe,0x00}, // M
'N':[]byte{0xfe,0xfe,0x60,0x30,0x18,0xfe,0xfe,0x00}, // N
'O':[]byte{0x38,0x7c,0xc6,0x82,0xc6,0x7c,0x38,0x00}, // O
'Ö':[]byte{0x38+128,0x7c,0xc6,0x82,0xc6,0x7c,0x38+128,0x00}, // Ö
'P':[]byte{0x82,0xfe,0xfe,0x92,0x90,0xf0,0x60,0x00}, // P
'Q':[]byte{0x78,0xfc,0x84,0x8e,0xfe,0x7a,0x00,0x00}, // Q
'R':[]byte{0x82,0xfe,0xfe,0x98,0x9c,0xf6,0x62,0x00}, // R
'S':[]byte{0x64,0xe6,0xb2,0x9a,0xde,0x4c,0x00,0x00}, // S
'T':[]byte{0xc0,0x82,0xfe,0xfe,0x82,0xc0,0x00,0x00}, // T
'U':[]byte{0xfe,0xfe,0x02,0x02,0xfe,0xfe,0x00,0x00}, // U
'V':[]byte{0xf8,0xfc,0x06,0x06,0xfc,0xf8,0x00,0x00}, // V
'W':[]byte{0xfe,0xfe,0x0c,0x18,0x0c,0xfe,0xfe,0x00}, // W
'X':[]byte{0xc6,0xee,0x38,0x10,0x38,0xee,0xc6,0x00}, // X
'Y':[]byte{0xe0,0xf2,0x1e,0x1e,0xf2,0xe0,0x00,0x00}, // Y
'Z':[]byte{0xe6,0xce,0x9a,0xb2,0xe2,0xc6,0x8e,0x00}, // Z
'[':[]byte{0x00,0xfe,0xfe,0x82,0x82,0x00,0x00,0x00}, // [
'\\':[]byte{0x80,0xc0,0x60,0x30,0x18,0x0c,0x06,0x00}, // '\'
']':[]byte{0x00,0x82,0x82,0xfe,0xfe,0x00,0x00,0x00}, // ]
'^':[]byte{0x10,0x30,0x60,0xc0,0x60,0x30,0x10,0x00}, // ^
'_':[]byte{0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01}, // _
'`':[]byte{0x00,0x00,0xc0,0xe0,0x20,0x00,0x00,0x00}, // `
'a':[]byte{0x04,0x2e,0x2a,0x2a,0x3c,0x1e,0x02,0x00}, // a
'ä':[]byte{0x04+64,0x2e,0x2a,0x2a,0x3c,0x1e+64,0x02,0x00}, // ä
'b':[]byte{0x82,0xfc,0xfe,0x22,0x22,0x3e,0x1c,0x00}, // b
'c':[]byte{0x1c,0x3e,0x22,0x22,0x36,0x14,0x00,0x00}, // c
'd':[]byte{0x0c,0x1e,0x12,0x92,0xfc,0xfe,0x02,0x00}, // d
'e':[]byte{0x1c,0x3e,0x2a,0x2a,0x3a,0x18,0x00,0x00}, // e
'f':[]byte{0x12,0x7e,0xfe,0x92,0xc0,0x40,0x00,0x00}, // f
'g':[]byte{0x19,0x3d,0x25,0x25,0x1f,0x3e,0x20,0x00}, // g
'h':[]byte{0x82,0xfe,0xfe,0x10,0x20,0x3e,0x1e,0x00}, // h
'i':[]byte{0x00,0x22,0xbe,0xbe,0x02,0x00,0x00,0x00}, // i
'j':[]byte{0x02,0x23,0x21,0xbf,0xbe,0x00,0x00,0x00}, // j
'k':[]byte{0x82,0xfe,0xfe,0x08,0x1c,0x36,0x22,0x00}, // k
'l':[]byte{0x00,0x82,0xfe,0xfe,0x02,0x00,0x00,0x00}, // l
'm':[]byte{0x3e,0x3e,0x30,0x18,0x30,0x3e,0x1e,0x00}, // m
'n':[]byte{0x3e,0x3e,0x20,0x20,0x3e,0x1e,0x00,0x00}, // n
'o':[]byte{0x1c,0x3e,0x22,0x22,0x3e,0x1c,0x00,0x00}, // o
'ö':[]byte{0x1c+64,0x3e,0x22,0x22,0x3e,0x1c+64,0x00,0x00}, // ö
'p':[]byte{0x21,0x3f,0x1f,0x25,0x24,0x3c,0x18,0x00}, // p
'q':[]byte{0x18,0x3c,0x24,0x25,0x1f,0x3f,0x21,0x00}, // q
'r':[]byte{0x22,0x3e,0x1e,0x22,0x38,0x18,0x00,0x00}, // r
's':[]byte{0x12,0x3a,0x2a,0x2a,0x2e,0x24,0x00,0x00}, // s
't':[]byte{0x00,0x20,0x7c,0xfe,0x22,0x24,0x00,0x00}, // t
'u':[]byte{0x3c,0x3e,0x02,0x02,0x3c,0x3e,0x02,0x00}, // u
'v':[]byte{0x38,0x3c,0x06,0x06,0x3c,0x38,0x00,0x00}, // v
'w':[]byte{0x3c,0x3e,0x06,0x0c,0x06,0x3e,0x3c,0x00}, // w
'x':[]byte{0x22,0x36,0x1c,0x08,0x1c,0x36,0x22,0x00}, // x
'y':[]byte{0x39,0x3d,0x05,0x05,0x3f,0x3e,0x00,0x00}, // y
'z':[]byte{0x32,0x26,0x2e,0x3a,0x32,0x26,0x00,0x00}, // z
'{':[]byte{0x10,0x10,0x7c,0xee,0x82,0x82,0x00,0x00}, // {
'|':[]byte{0x00,0x00,0x00,0xee,0xee,0x00,0x00,0x00}, // |
'}':[]byte{0x82,0x82,0xee,0x7c,0x10,0x10,0x00,0x00}, // }
'~':[]byte{0x40,0xc0,0x80,0xc0,0x40,0xc0,0x80,0x00}, // ~
    }
    
    result:=make(map[rune]MonoBitmap)
    for s,dat:=range tmp{
        bm:=NewMonoBitmap(8,8,false)
        for x:=0;x<8;x++{
            for y:=0;y<8;y++{
                mask:=byte(1<<byte(7-y))
                bm.SetPix(x,y,(dat[x]&mask)>0)
                result[s]=bm
            }
        }
    }
    return result
}
